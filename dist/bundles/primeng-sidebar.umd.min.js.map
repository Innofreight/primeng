{"version":3,"sources":["../../src/app/components/sidebar/sidebar.ts"],"names":["showAnimation","animation","style","transform","opacity","animate","hideAnimation","Sidebar","el","renderer","cd","this","blockScroll","autoZIndex","baseZIndex","modal","dismissible","showCloseIcon","closeOnEscape","transitionOptions","onShow","EventEmitter","onHide","visibleChange","_position","_fullScreen","transformOptions","prototype","ngAfterViewInit","initialized","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","Object","defineProperty","_visible","val","value","show","container","zIndex","String","DomHandler","zindex","enableModality","emit","hide","disableModality","close","event","preventDefault","mask","document","createElement","parseInt","addMultipleClasses","maskClickListener","listen","body","appendChild","addClass","unbindMaskClickListener","removeChild","removeClass","onAnimationStart","toState","element","appendContainer","bindDocumentEscapeListener","unbindGlobalListeners","appendTo","documentTarget","nativeElement","ownerDocument","documentEscapeListener","which","unbindDocumentEscapeListener","ngOnDestroy","visible","Component","args","selector","animations","trigger","transition","useAnimation","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","Input","ContentChildren","PrimeTemplate","Output","NgModule","imports","CommonModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,Output,EventEmitter,ElementRef,Renderer2,ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, QueryList, AfterContentInit, TemplateRef, ChangeDetectorRef} from '@angular/core';\r\nimport {trigger, style, transition, animate, animation, useAnimation} from '@angular/animations';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RippleModule} from 'primeng/ripple';\r\nimport {DomHandler} from 'primeng/dom';\r\nimport {PrimeTemplate} from 'primeng/api';\r\n\r\nconst showAnimation = animation([\r\n    style({ transform: '{{transform}}', opacity: 0 }),\r\n    animate('{{transition}}')\r\n]);\r\n\r\nconst hideAnimation = animation([\r\n    animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 }))\r\n]);\r\n\r\n@Component({\r\n    selector: 'p-sidebar',\r\n    template: `\r\n        <div #container [ngClass]=\"{'p-sidebar':true, 'p-sidebar-active': visible,\r\n            'p-sidebar-left': (position === 'left' && !fullScreen), 'p-sidebar-right': (position === 'right' && !fullScreen),\r\n            'p-sidebar-top': (position === 'top' && !fullScreen), 'p-sidebar-bottom': (position === 'bottom' && !fullScreen),\r\n            'p-sidebar-full': fullScreen}\"  *ngIf=\"visible\" [@panelState]=\"{value: 'visible', params: {transform: transformOptions, transition: transitionOptions}}\" (@panelState.start)=\"onAnimationStart($event)\" [ngStyle]=\"style\" [class]=\"styleClass\"  role=\"complementary\" [attr.aria-modal]=\"modal\">\r\n            <div class=\"p-sidebar-header\">\r\n                <button type=\"button\" class=\"p-sidebar-close p-sidebar-icon p-link\" *ngIf=\"showCloseIcon\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\r\n                    <span class=\"p-sidebar-close-icon pi pi-times\"></span>\r\n                </button>\r\n            </div>\r\n            <div class=\"p-sidebar-content\">\r\n                <ng-content></ng-content>\r\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n            </div>\r\n        </div>\r\n    `,\r\n    animations: [\r\n        trigger('panelState', [\r\n            transition('void => visible', [\r\n                useAnimation(showAnimation)\r\n            ]),\r\n            transition('visible => void', [\r\n                useAnimation(hideAnimation)\r\n            ])\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./sidebar.css']\r\n})\r\nexport class Sidebar implements AfterViewInit, AfterContentInit, OnDestroy {\r\n\r\n    @Input() appendTo: any;\r\n\r\n    @Input() blockScroll: boolean = false;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() ariaCloseLabel: string;\r\n\r\n    @Input() autoZIndex: boolean = true;\r\n\r\n    @Input() baseZIndex: number = 0;\r\n\r\n    @Input() modal: boolean = true;\r\n\r\n    @Input() dismissible: boolean = true;\r\n\r\n    @Input() showCloseIcon: boolean = true;\r\n\r\n    @Input() closeOnEscape: boolean = true;\r\n\r\n    @Input() transitionOptions: string = '150ms cubic-bezier(0, 0, 0.2, 1)';\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() visibleChange:EventEmitter<any> = new EventEmitter();\r\n\r\n    initialized: boolean;\r\n\r\n    _visible: boolean;\r\n\r\n    _position: string = \"left\";\r\n\r\n    _fullScreen: boolean = false;\r\n\r\n    container: HTMLDivElement;\r\n\r\n    transformOptions: any = \"translate3d(-100%, 0px, 0px)\";\r\n\r\n    mask: HTMLDivElement;\r\n\r\n    maskClickListener: Function;\r\n\r\n    documentEscapeListener: Function;\r\n\r\n    contentTemplate: TemplateRef<any>;\r\n\r\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        this.initialized = true;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'content':\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n\r\n                default:\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    @Input() get visible(): boolean {\r\n        return this._visible;\r\n    }\r\n\r\n    set visible(val:boolean) {\r\n        this._visible = val;\r\n    }\r\n\r\n    @Input() get position(): string {\r\n        return this._position;\r\n    };\r\n\r\n    set position(value: string) {\r\n        this._position = value;\r\n\r\n        switch (value) {\r\n            case 'left':\r\n                this.transformOptions = \"translate3d(100%, 0px, 0px)\";\r\n            break;\r\n            case 'right':\r\n                this.transformOptions = \"translate3d(100%, 0px, 0px)\";\r\n            break;\r\n            case 'bottom':\r\n                this.transformOptions = \"translate3d(0px, 100%, 0px)\";\r\n            break;\r\n            case 'top':\r\n                this.transformOptions = \"translate3d(0px, -100%, 0px)\";\r\n            break;\r\n        }\r\n    }\r\n\r\n    @Input() get fullScreen(): boolean {\r\n        return this._fullScreen;\r\n    }\r\n\r\n    set fullScreen(value: boolean) {\r\n        this._fullScreen = value;\r\n\r\n        if (value)\r\n            this.transformOptions = \"none\";\r\n    }\r\n\r\n    show() {\r\n        if (this.autoZIndex) {\r\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\r\n        }\r\n\r\n        if (this.modal) {\r\n            this.enableModality();\r\n        }\r\n\r\n        this.onShow.emit({});\r\n    }\r\n\r\n    hide() {\r\n        this.onHide.emit({});\r\n\r\n        if (this.modal) {\r\n            this.disableModality();\r\n        }\r\n    }\r\n\r\n    close(event: Event) {\r\n        this.hide();\r\n        this.visibleChange.emit(false);\r\n        event.preventDefault();\r\n    }\r\n\r\n    enableModality() {\r\n        if (!this.mask) {\r\n            this.mask = document.createElement('div');\r\n            this.mask.style.zIndex = String(parseInt(this.container.style.zIndex) - 1);\r\n            DomHandler.addMultipleClasses(this.mask, 'p-component-overlay p-sidebar-mask');\r\n\r\n            if (this.dismissible){\r\n                this.maskClickListener = this.renderer.listen(this.mask, 'click', (event: any) => {\r\n                    if (this.dismissible) {\r\n                        this.close(event);\r\n                    }\r\n                });\r\n            }\r\n\r\n            document.body.appendChild(this.mask);\r\n            if (this.blockScroll) {\r\n                DomHandler.addClass(document.body, 'p-overflow-hidden');\r\n            }\r\n        }\r\n    }\r\n\r\n    disableModality() {\r\n        if (this.mask) {\r\n            this.unbindMaskClickListener();\r\n            document.body.removeChild(this.mask);\r\n            if (this.blockScroll) {\r\n                DomHandler.removeClass(document.body, 'p-overflow-hidden');\r\n            }\r\n            this.mask = null;\r\n        }\r\n    }\r\n\r\n    onAnimationStart(event){\r\n        switch(event.toState) {\r\n            case 'visible':\r\n                this.container = event.element;\r\n                this.appendContainer();\r\n                this.show();\r\n\r\n                if (this.closeOnEscape) {\r\n                    this.bindDocumentEscapeListener();\r\n                }\r\n            break;\r\n\r\n            case 'void':\r\n                this.hide();\r\n                this.unbindGlobalListeners();\r\n            break;\r\n        }\r\n    }\r\n\r\n    appendContainer() {\r\n        if (this.appendTo) {\r\n            if (this.appendTo === 'body')\r\n                document.body.appendChild(this.container);\r\n            else\r\n                DomHandler.appendChild(this.container, this.appendTo);\r\n        }\r\n    }\r\n\r\n    bindDocumentEscapeListener() {\r\n        const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\r\n\r\n        this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', (event) => {\r\n            if (event.which == 27) {\r\n                if (parseInt(this.container.style.zIndex) === (DomHandler.zindex + this.baseZIndex)) {\r\n                    this.close(event);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    unbindDocumentEscapeListener() {\r\n        if (this.documentEscapeListener) {\r\n            this.documentEscapeListener();\r\n            this.documentEscapeListener = null;\r\n        }\r\n    }\r\n\r\n    unbindMaskClickListener() {\r\n        if (this.maskClickListener) {\r\n            this.maskClickListener();\r\n            this.maskClickListener = null;\r\n        }\r\n    }\r\n\r\n    unbindGlobalListeners() {\r\n        this.unbindMaskClickListener();\r\n        this.unbindDocumentEscapeListener();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.initialized = false;\r\n\r\n        if (this.visible) {\r\n            this.hide();\r\n        }\r\n\r\n        if (this.appendTo) {\r\n            this.el.nativeElement.appendChild(this.container);\r\n        }\r\n\r\n\t\tthis.unbindGlobalListeners();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,RippleModule],\r\n    exports: [Sidebar],\r\n    declarations: [Sidebar]\r\n})\r\nexport class SidebarModule { }\r\n"]}