{"version":3,"sources":["../../src/app/components/button/button.ts"],"names":["ButtonDirective","el","this","iconPos","loadingIcon","_loading","prototype","ngAfterViewInit","_initialStyleClass","nativeElement","className","DomHandler","addMultipleClasses","getStyleClass","icon","createIconEl","labelElement","document","createElement","label","setAttribute","appendChild","createTextNode","innerHTML","initialized","styleClass","loading","setStyleClass","iconElement","iconPosClass","addClass","getIconClass","labelEl","findSingle","insertBefore","_icon","setIconClass","removeIconElement","removeChild","Object","defineProperty","_label","val","textContent","ngOnDestroy","Directive","args","selector","ElementRef","Input","Button","type","onClick","EventEmitter","onFocus","onBlur","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","badgeStyleClass","p-badge p-component","p-badge-no-gutter","badge","String","length","Component","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ContentChildren","PrimeTemplate","Output","NgModule","imports","CommonModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Directive,Component,ElementRef,EventEmitter,AfterViewInit,Output,OnDestroy,Input,ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, AfterContentInit, TemplateRef, QueryList} from '@angular/core';\r\nimport {DomHandler} from 'primeng/dom';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RippleModule} from 'primeng/ripple'; \r\nimport {PrimeTemplate} from 'primeng/api'; \r\n\r\n@Directive({\r\n    selector: '[pButton]'\r\n})\r\nexport class ButtonDirective implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() iconPos: 'left' | 'right' | 'top' | 'bottom' = 'left';\r\n            \r\n    @Input() loadingIcon: string = \"pi pi-spinner pi-spin\";\r\n\r\n    public _label: string;\r\n    \r\n    public _icon: string;\r\n\r\n    public _loading: boolean = false;\r\n            \r\n    public initialized: boolean;\r\n    \r\n    public _initialStyleClass: string;\r\n\r\n    constructor(public el: ElementRef) {}\r\n    \r\n    ngAfterViewInit() {\r\n        this._initialStyleClass = this.el.nativeElement.className;\r\n        DomHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\r\n\r\n        if (this.icon) {\r\n            this.createIconEl();\r\n        }\r\n        \r\n        let labelElement = document.createElement(\"span\");\r\n        if (this.icon && !this.label) {\r\n            labelElement.setAttribute('aria-hidden', 'true');\r\n        }\r\n        labelElement.className = 'p-button-label';\r\n\r\n        if (this.label)\r\n            labelElement.appendChild(document.createTextNode(this.label));\r\n        else \r\n            labelElement.innerHTML = '&nbsp;';\r\n        \r\n        this.el.nativeElement.appendChild(labelElement);\r\n        this.initialized = true;\r\n    }\r\n        \r\n    getStyleClass(): string {\r\n        let styleClass = 'p-button p-component';\r\n        if (this.icon && !this.label) {\r\n            styleClass = styleClass + ' p-button-icon-only';\r\n        }\r\n\r\n        if (this.loading) {\r\n            styleClass = styleClass + ' p-disabled p-button-loading';\r\n            if (!this.icon && this.label)\r\n                styleClass = styleClass + ' p-button-loading-label-only';\r\n        }\r\n        \r\n        return styleClass;\r\n    }\r\n\r\n    setStyleClass() {\r\n        let styleClass = this.getStyleClass();\r\n        this.el.nativeElement.className = styleClass + ' ' + this._initialStyleClass;\r\n    }\r\n\r\n    createIconEl() {\r\n        let iconElement = document.createElement(\"span\");\r\n        iconElement.className = 'p-button-icon';\r\n        iconElement.setAttribute(\"aria-hidden\", \"true\");\r\n        let iconPosClass = this.label ? 'p-button-icon-' + this.iconPos : null;\r\n        \r\n        if (iconPosClass) {\r\n            DomHandler.addClass(iconElement, iconPosClass);\r\n        }\r\n\r\n        DomHandler.addMultipleClasses(iconElement, this.getIconClass());\r\n        let labelEl = DomHandler.findSingle(this.el.nativeElement, '.p-button-label')\r\n\r\n        if (labelEl)\r\n            this.el.nativeElement.insertBefore(iconElement, labelEl);\r\n        else\r\n            this.el.nativeElement.appendChild(iconElement)\r\n    }\r\n\r\n    getIconClass() {\r\n        return this.loading ? 'p-button-loading-icon ' + this.loadingIcon : this._icon;\r\n    }\r\n\r\n    setIconClass() {\r\n        let iconElement = DomHandler.findSingle(this.el.nativeElement, '.p-button-icon');\r\n        if (iconElement) {\r\n            if (this.iconPos) \r\n                iconElement.className = 'p-button-icon p-button-icon-' + this.iconPos + ' ' + this.getIconClass();\r\n            else \r\n                iconElement.className = 'p-button-icon ' + this.getIconClass();\r\n        }\r\n        else {\r\n            this.createIconEl();\r\n        }\r\n    }\r\n\r\n    removeIconElement() {\r\n        let iconElement = DomHandler.findSingle(this.el.nativeElement, '.p-button-icon');\r\n        this.el.nativeElement.removeChild(iconElement)\r\n    }\r\n    \r\n    @Input() get label(): string {\r\n        return this._label;\r\n    }\r\n\r\n    set label(val: string) {\r\n        this._label = val;\r\n        \r\n        if (this.initialized) {\r\n            DomHandler.findSingle(this.el.nativeElement, '.p-button-label').textContent = this._label || '&nbsp;';\r\n            this.setStyleClass();\r\n        }\r\n    }\r\n    \r\n    @Input() get icon(): string {\r\n        return this._icon;\r\n    }\r\n\r\n    set icon(val: string) {\r\n        this._icon = val;\r\n        \r\n        if (this.initialized) {\r\n            this.setIconClass();\r\n            this.setStyleClass();\r\n        }\r\n    }\r\n\r\n    @Input() get loading(): boolean {\r\n        return this._loading;\r\n    }\r\n\r\n    set loading(val: boolean) {\r\n        this._loading = val;\r\n        \r\n        if (this.initialized) {\r\n            if (this.loading || this.icon)\r\n                this.setIconClass();\r\n            else \r\n                this.removeIconElement();\r\n            \r\n            this.setStyleClass();\r\n        }\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        this.initialized = false;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-button',\r\n    template: `\r\n        <button [attr.type]=\"type\" [class]=\"styleClass\" [ngStyle]=\"style\" [disabled]=\"disabled || loading\"\r\n            [ngClass]=\"{'p-button p-component':true,\r\n                        'p-button-icon-only': (icon && !label),\r\n                        'p-button-vertical': (iconPos === 'top' || iconPos === 'bottom') && label,\r\n                        'p-disabled': this.disabled || this.loading,\r\n                        'p-button-loading': this.loading,\r\n                        'p-button-loading-label-only': this.loading && !this.icon && this.label}\"\r\n                        (click)=\"onClick.emit($event)\" (focus)=\"onFocus.emit($event)\" (blur)=\"onBlur.emit($event)\" pRipple>\r\n            <ng-content></ng-content>\r\n            <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n            <span [ngClass]=\"{'p-button-icon': true,\r\n                        'p-button-icon-left': iconPos === 'left' && label,\r\n                        'p-button-icon-right': iconPos === 'right' && label,\r\n                        'p-button-icon-top': iconPos === 'top' && label,\r\n                        'p-button-icon-bottom': iconPos === 'bottom' && label}\"\r\n                        [class]=\"loading ? 'p-button-loading-icon ' + loadingIcon : icon\" *ngIf=\"!contentTemplate && (icon||loading)\" [attr.aria-hidden]=\"true\"></span>\r\n            <span class=\"p-button-label\" [attr.aria-hidden]=\"icon && !label\" *ngIf=\"!contentTemplate\">{{label||'&nbsp;'}}</span>\r\n            <span [ngClass]=\"badgeStyleClass()\" [class]=\"badgeClass\" *ngIf=\"!contentTemplate && badge\">{{badge}}</span>\r\n        </button>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class Button implements AfterContentInit {\r\n\r\n    @Input() type: string = \"button\";\r\n\r\n    @Input() iconPos: string = 'left';\r\n\r\n    @Input() icon: string;\r\n\r\n    @Input() badge: string;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() loading: boolean = false;\r\n\r\n    @Input() loadingIcon: string = \"pi pi-spinner pi-spin\";\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() badgeClass: string;\r\n\r\n    contentTemplate: TemplateRef<any>;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'content':\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n                \r\n                default:\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    badgeStyleClass() {\r\n        return {\r\n            'p-badge p-component': true,\r\n            'p-badge-no-gutter': this.badge && String(this.badge).length === 1\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,RippleModule],\r\n    exports: [ButtonDirective,Button],\r\n    declarations: [ButtonDirective,Button]\r\n})\r\nexport class ButtonModule { }\r\n"]}