{"version":3,"sources":["../../src/app/components/overlaypanel/overlaypanel.ts"],"names":["OverlayPanel","el","renderer","cd","zone","this","dismissable","autoZIndex","baseZIndex","focusOnShow","showTransitionOptions","hideTransitionOptions","onShow","EventEmitter","onHide","overlayVisible","render","isContainerClicked","prototype","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","markForCheck","onContainerClick","bindDocumentClickListener","documentClickListener","runOutsideAngular","documentEvent","DomHandler","isIOS","documentTarget","nativeElement","ownerDocument","listen","event","container","contains","target","run","hide","unbindDocumentClickListener","toggle","hasTargetChanged","destroyCallback","show","currentTarget","appendContainer","appendTo","document","body","appendChild","restoreAppend","align","style","zIndex","String","zindex","absolutePosition","containerOffset","getOffset","targetOffset","arrowLeft","left","setProperty","top","addClass","onAnimationStart","toState","element","emit","bindDocumentResizeListener","bindScrollListener","focus","onAnimationEnd","onContainerDestroy","focusable","findSingle","setTimeout","onCloseClick","preventDefault","onWindowResize","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","scrollHandler","ConnectedOverlayScrollHandler","unbindScrollListener","ngOnDestroy","destroy","Component","args","selector","animations","trigger","state","transform","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","NgZone","Input","Output","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","RippleModule","SharedModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,OnDestroy,EventEmitter,Renderer2,ElementRef,ChangeDetectorRef,NgZone,\r\n        ContentChildren,TemplateRef,AfterContentInit,QueryList,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler, ConnectedOverlayScrollHandler} from 'primeng/dom';\r\nimport {SharedModule,PrimeTemplate} from 'primeng/api';\r\nimport {RippleModule} from 'primeng/ripple';\r\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\r\n\r\n@Component({\r\n    selector: 'p-overlayPanel',\r\n    template: `\r\n        <div *ngIf=\"render\" [ngClass]=\"'p-overlaypanel p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onContainerClick()\"\r\n            [@animation]=\"{value: (overlayVisible ? 'open': 'close'), params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\"\r\n                (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\">\r\n            <div class=\"p-overlaypanel-content\">\r\n                <ng-content></ng-content>\r\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n            </div>\r\n            <button *ngIf=\"showCloseIcon\" type=\"button\" class=\"p-overlaypanel-close p-link\" (click)=\"onCloseClick($event)\" (keydown.enter)=\"hide()\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\r\n                <span class=\"p-overlaypanel-close-icon pi pi-times\"></span>\r\n            </button>\r\n        </div>\r\n    `,\r\n    animations: [\r\n        trigger('animation', [\r\n            state('void', style({\r\n                transform: 'scaleY(0.8)',\r\n                opacity: 0\r\n            })),\r\n            state('close', style({\r\n                opacity: 0\r\n            })),\r\n            state('open', style({\r\n                transform: 'translateY(0)',\r\n                opacity: 1\r\n            })),\r\n            transition('void => open', animate('{{showTransitionParams}}')),\r\n            transition('open => close', animate('{{hideTransitionParams}}')),\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./overlaypanel.css']\r\n})\r\nexport class OverlayPanel implements AfterContentInit, OnDestroy {\r\n\r\n    @Input() dismissable: boolean = true;\r\n\r\n    @Input() showCloseIcon: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() appendTo: any;\r\n\r\n    @Input() autoZIndex: boolean = true;\r\n\r\n    @Input() ariaCloseLabel: string;\r\n\r\n    @Input() baseZIndex: number = 0;\r\n\r\n    @Input() focusOnShow: boolean = true;\r\n\r\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\r\n\r\n    @Input() hideTransitionOptions: string = '.1s linear';\r\n\r\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    container: HTMLDivElement;\r\n\r\n    overlayVisible: boolean = false;\r\n\r\n    render: boolean = false;\r\n\r\n    isContainerClicked: boolean = true;\r\n\r\n    documentClickListener: any;\r\n\r\n    target: any;\r\n\r\n    willHide: boolean;\r\n\r\n    scrollHandler: any;\r\n\r\n    documentResizeListener: any;\r\n\r\n    contentTemplate: TemplateRef<any>;\r\n\r\n    destroyCallback: Function;\r\n\r\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef, private zone: NgZone) {}\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'content':\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n\r\n                default:\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n            }\r\n\r\n            this.cd.markForCheck();\r\n        });\r\n    }\r\n\r\n    onContainerClick() {\r\n        this.isContainerClicked = true;\r\n    }\r\n\r\n    bindDocumentClickListener() {\r\n        if (!this.documentClickListener && this.dismissable) {\r\n            this.zone.runOutsideAngular(() => {\r\n                let documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click';\r\n                const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\r\n\r\n                this.documentClickListener = this.renderer.listen(documentTarget, documentEvent, (event) => {\r\n                    if (!this.container.contains(event.target) && this.target !== event.target && !this.target.contains(event.target) && !this.isContainerClicked) {\r\n                        this.zone.run(() => {\r\n                            this.hide();\r\n                        });\r\n                    }\r\n\r\n                    this.isContainerClicked = false;\r\n                    this.cd.markForCheck();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    unbindDocumentClickListener() {\r\n        if (this.documentClickListener) {\r\n            this.documentClickListener();\r\n            this.documentClickListener = null;\r\n        }\r\n    }\r\n\r\n    toggle(event, target?) {\r\n        if (this.overlayVisible) {\r\n            if (this.hasTargetChanged(event, target)) {\r\n                this.destroyCallback = () => {\r\n                    this.show(null, (target||event.currentTarget||event.target));\r\n                };\r\n            }\r\n\r\n            this.hide();\r\n        }\r\n        else {\r\n            this.show(event, target);\r\n        }\r\n    }\r\n\r\n    show(event, target?) {\r\n        this.target = target||event.currentTarget||event.target;\r\n        this.overlayVisible = true;\r\n        this.render = true;\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    hasTargetChanged(event, target) {\r\n        return this.target != null && this.target !== (target||event.currentTarget||event.target);\r\n    }\r\n\r\n    appendContainer() {\r\n        if (this.appendTo) {\r\n            if (this.appendTo === 'body')\r\n                document.body.appendChild(this.container);\r\n            else\r\n                DomHandler.appendChild(this.container, this.appendTo);\r\n        }\r\n    }\r\n\r\n    restoreAppend() {\r\n        if (this.container && this.appendTo) {\r\n            this.el.nativeElement.appendChild(this.container);\r\n        }\r\n    }\r\n\r\n    align() {\r\n        if (this.autoZIndex) {\r\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\r\n        }\r\n        DomHandler.absolutePosition(this.container, this.target);\r\n\r\n        const containerOffset = DomHandler.getOffset(this.container);\r\n        const targetOffset = DomHandler.getOffset(this.target);\r\n        let arrowLeft = 0;\r\n\r\n        if (containerOffset.left < targetOffset.left) {\r\n            arrowLeft = targetOffset.left - containerOffset.left;\r\n        }\r\n        this.container.style.setProperty('--overlayArrowLeft', `${arrowLeft}px`);\r\n\r\n        if (containerOffset.top < targetOffset.top) {\r\n            DomHandler.addClass(this.container, 'p-overlaypanel-flipped');\r\n        }\r\n    }\r\n\r\n    onAnimationStart(event: AnimationEvent) {\r\n        if (event.toState === 'open') {\r\n            this.container = event.element;\r\n            this.onShow.emit(null);\r\n            this.appendContainer();\r\n            this.align();\r\n            this.bindDocumentClickListener();\r\n            this.bindDocumentResizeListener();\r\n            this.bindScrollListener();\r\n\r\n            if (this.focusOnShow) {\r\n                this.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    onAnimationEnd(event: AnimationEvent) {\r\n        switch (event.toState) {\r\n            case 'void':\r\n                if (this.destroyCallback) {\r\n                    this.destroyCallback();\r\n                    this.destroyCallback = null;\r\n                }\r\n            break;\r\n\r\n            case 'close':\r\n                this.onContainerDestroy();\r\n                this.onHide.emit({});\r\n                this.render = false;\r\n            break;\r\n        }\r\n    }\r\n\r\n    focus() {\r\n        let focusable = DomHandler.findSingle(this.container, '[autofocus]');\r\n        if (focusable) {\r\n            this.zone.runOutsideAngular(() => {\r\n                setTimeout(() => focusable.focus(), 5);\r\n            });\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.overlayVisible = false;\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    onCloseClick(event) {\r\n        this.hide();\r\n        event.preventDefault();\r\n    }\r\n\r\n    onWindowResize(event) {\r\n        this.hide();\r\n    }\r\n\r\n    bindDocumentResizeListener() {\r\n        this.documentResizeListener = this.onWindowResize.bind(this);\r\n        window.addEventListener('resize', this.documentResizeListener);\r\n    }\r\n\r\n    unbindDocumentResizeListener() {\r\n        if (this.documentResizeListener) {\r\n            window.removeEventListener('resize', this.documentResizeListener);\r\n            this.documentResizeListener = null;\r\n        }\r\n    }\r\n\r\n    bindScrollListener() {\r\n        if (!this.scrollHandler) {\r\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\r\n                if (this.overlayVisible) {\r\n                    this.hide();\r\n                }\r\n            });\r\n        }\r\n\r\n        this.scrollHandler.bindScrollListener();\r\n    }\r\n\r\n    unbindScrollListener() {\r\n        if (this.scrollHandler) {\r\n            this.scrollHandler.unbindScrollListener();\r\n        }\r\n    }\r\n\r\n    onContainerDestroy() {\r\n        this.target = null;\r\n        this.unbindDocumentClickListener();\r\n        this.unbindDocumentResizeListener();\r\n        this.unbindScrollListener();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.scrollHandler) {\r\n            this.scrollHandler.destroy();\r\n            this.scrollHandler = null;\r\n        }\r\n\r\n        this.target = null;\r\n        this.destroyCallback = null;\r\n        if (this.container) {\r\n            this.restoreAppend();\r\n            this.onContainerDestroy();\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,RippleModule, SharedModule],\r\n    exports: [OverlayPanel, SharedModule],\r\n    declarations: [OverlayPanel]\r\n})\r\nexport class OverlayPanelModule { }\r\n"]}