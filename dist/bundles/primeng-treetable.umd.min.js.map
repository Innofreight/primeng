{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../src/app/components/treetable/treetable.ts"],"names":["Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","TreeTableService","this","sortSource","Subject","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","prototype","onSort","sortMeta","onSelectionChange","onContextMenu","node","onUIUpdate","onTotalRecordsChange","Injectable","TreeTable","el","zone","tableService","filterService","lazy","lazyLoadOnInit","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","showFirstLastIcon","showPageLinks","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownItemTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","defineProperty","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","nodes_1","nodes_1_1","rowNode","expanded","children","data","rows","dataKey","Array","isArray","_b","_c","String","ObjectUtils","resolveFieldData","onPageChange","event","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","nodes_2","nodes_2_1","sortMultipleNodes","multisortmeta","multisortField","nodes_3","nodes_3_1","isSorted","sorted","globalFilter","virtualScroll","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","options","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","DomHandler","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","scrollableBody_1","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","tableViewChild","containerWidth","element","removeClass","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","isMultipleSelectionMode","rowIndex","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","data_1","data_1_1","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","index_1","equals","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","filterLocale","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","editingCellData","editingCellField","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","Component","args","selector","providers","encapsulation","ViewEncapsulation","None","ElementRef","NgZone","FilterService","Input","Output","ViewChild","ContentChildren","PrimeTemplate","TTBody","tt","treeTableService","cd","subscription","subscribe","detectChanges","unsubscribe","ChangeDetectorRef","TTScrollableView","_scrollHeight","includes","console","log","virtualScrollBody","ngAfterViewInit","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenColumns","frozenView","previousElementSibling","frozenSiblingBody","scrollBarWidth","scrollHeaderBoxViewChild","paddingRight","scrollFooterBoxViewChild","bindEvents","runOutsideAngular","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollTop","scrollToIndex","CdkVirtualScrollViewport","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","Directive","host","[class.p-sortable-column]","[class.p-highlight]","[attr.tabindex]","[attr.role]","HostListener","TTSortIcon","markForCheck","changeDetection","ChangeDetectionStrategy","OnPush","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","[class.p-highlight-contextmenu]","TTCheckbox","disabled","onFocus","boxViewChild","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","data_2","data_2_1","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","row","TreeTableToggler","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","RippleModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeNode } from 'primeng/api';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { PaginatorModule } from 'primeng/paginator';\r\nimport { PrimeTemplate, SharedModule, FilterService } from 'primeng/api';\r\nimport { SortMeta } from 'primeng/api';\r\nimport { BlockableUI } from 'primeng/api';\r\nimport { FilterMetadata } from 'primeng/api';\r\nimport { ObjectUtils } from 'primeng/utils';\r\nimport { RippleModule } from 'primeng/ripple';\r\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\n\r\n@Injectable()\r\nexport class TreeTableService {\r\n\r\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\r\n    private selectionSource = new Subject();\r\n    private contextMenuSource = new Subject<any>();\r\n    private uiUpdateSource = new Subject<any>();\r\n    private totalRecordsSource = new Subject<any>();\r\n\r\n    sortSource$ = this.sortSource.asObservable();\r\n    selectionSource$ = this.selectionSource.asObservable();\r\n    contextMenuSource$ = this.contextMenuSource.asObservable();\r\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\r\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\r\n\r\n    onSort(sortMeta: SortMeta|SortMeta[]) {\r\n        this.sortSource.next(sortMeta);\r\n    }\r\n\r\n    onSelectionChange() {\r\n        this.selectionSource.next();\r\n    }\r\n\r\n    onContextMenu(node: any) {\r\n        this.contextMenuSource.next(node);\r\n    }\r\n\r\n    onUIUpdate(value: any) {\r\n        this.uiUpdateSource.next(value);\r\n    }\r\n\r\n    onTotalRecordsChange(value: number) {\r\n        this.totalRecordsSource.next(value);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTable',\r\n    template: `\r\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-treetable-scrollable-body\"\r\n                [ngClass]=\"{'p-treetable p-component': true,\r\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\r\n                'p-treetable-auto-layout': autoLayout,\r\n                'p-treetable-resizable': resizableColumns,\r\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\r\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\r\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\r\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\r\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\r\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\r\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\r\n\r\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\r\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <thead class=\"p-treetable-thead\">\r\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\r\n                    </thead>\r\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\r\n                    <tfoot class=\"p-treetable-tfoot\">\r\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </tfoot>\r\n                </table>\r\n            </div>\r\n\r\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\r\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\r\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\r\n            </div>\r\n\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\r\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\r\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\r\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\r\n            </div>\r\n\r\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\r\n\r\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\r\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\r\n        </div>\r\n    `,\r\n    providers: [TreeTableService],\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./treetable.css']\r\n})\r\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\r\n\r\n    @Input() columns: any[];\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() tableStyle: any;\r\n\r\n    @Input() tableStyleClass: string;\r\n\r\n    @Input() autoLayout: boolean;\r\n\r\n    @Input() lazy: boolean = false;\r\n\r\n    @Input() lazyLoadOnInit: boolean = true;\r\n\r\n    @Input() paginator: boolean;\r\n\r\n    @Input() rows: number;\r\n\r\n    @Input() first: number = 0;\r\n\r\n    @Input() pageLinks: number = 5;\r\n\r\n    @Input() rowsPerPageOptions: any[];\r\n\r\n    @Input() alwaysShowPaginator: boolean = true;\r\n\r\n    @Input() paginatorPosition: string = 'bottom';\r\n\r\n    @Input() paginatorDropdownAppendTo: any;\r\n\r\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\r\n\r\n    @Input() showCurrentPageReport: boolean;\r\n\r\n    @Input() showJumpToPageDropdown: boolean;\r\n\r\n    @Input() showFirstLastIcon: boolean = true;\r\n\r\n    @Input() showPageLinks: boolean = true;\r\n\r\n    @Input() defaultSortOrder: number = 1;\r\n\r\n    @Input() sortMode: string = 'single';\r\n\r\n    @Input() resetPageOnSort: boolean = true;\r\n\r\n    @Input() customSort: boolean;\r\n\r\n    @Input() selectionMode: string;\r\n\r\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() contextMenuSelection: any;\r\n\r\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() contextMenuSelectionMode: string = \"separate\";\r\n\r\n    @Input() dataKey: string;\r\n\r\n    @Input() metaKeySelection: boolean;\r\n\r\n    @Input() compareSelectionBy: string = 'deepEquals';\r\n\r\n    @Input() rowHover: boolean;\r\n\r\n    @Input() loading: boolean;\r\n\r\n    @Input() loadingIcon: string = 'pi pi-spinner';\r\n\r\n    @Input() showLoader: boolean = true;\r\n\r\n    @Input() scrollable: boolean;\r\n\r\n    @Input() scrollHeight: string;\r\n\r\n    @Input() virtualScroll: boolean;\r\n\r\n    @Input() virtualScrollDelay: number = 150;\r\n\r\n    @Input() virtualRowHeight: number = 28;\r\n\r\n    @Input() minBufferPx: number;\r\n\r\n    @Input() maxBufferPx: number;\r\n\r\n    @Input() frozenWidth: string;\r\n\r\n    @Input() frozenColumns: any[];\r\n\r\n    @Input() resizableColumns: boolean;\r\n\r\n    @Input() columnResizeMode: string = 'fit';\r\n\r\n    @Input() reorderableColumns: boolean;\r\n\r\n    @Input() contextMenu: any;\r\n\r\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\r\n\r\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\r\n\r\n    @Input() globalFilterFields: string[];\r\n\r\n    @Input() filterDelay: number = 300;\r\n\r\n    @Input() filterMode: string = 'lenient';\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ViewChild('container') containerViewChild: ElementRef;\r\n\r\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\r\n\r\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\r\n\r\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\r\n\r\n    @ViewChild('table') tableViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollableView') scrollableViewChild;\r\n\r\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\r\n\r\n    _value: TreeNode[] = [];\r\n\r\n    serializedValue: any[];\r\n\r\n    _totalRecords: number = 0;\r\n\r\n    _multiSortMeta: SortMeta[];\r\n\r\n    _sortField: string;\r\n\r\n    _sortOrder: number = 1;\r\n\r\n    filteredNodes: any[];\r\n\r\n    filterTimeout: any;\r\n\r\n    colGroupTemplate: TemplateRef<any>;\r\n\r\n    captionTemplate: TemplateRef<any>;\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    bodyTemplate: TemplateRef<any>;\r\n\r\n    loadingBodyTemplate: TemplateRef<any>;\r\n\r\n    footerTemplate: TemplateRef<any>;\r\n\r\n    summaryTemplate: TemplateRef<any>;\r\n\r\n    emptyMessageTemplate: TemplateRef<any>;\r\n\r\n    paginatorLeftTemplate: TemplateRef<any>;\r\n\r\n    paginatorRightTemplate: TemplateRef<any>;\r\n\r\n    paginatorDropdownItemTemplate: TemplateRef<any>;\r\n\r\n    frozenHeaderTemplate: TemplateRef<any>;\r\n\r\n    frozenBodyTemplate: TemplateRef<any>;\r\n\r\n    frozenFooterTemplate: TemplateRef<any>;\r\n\r\n    frozenColGroupTemplate: TemplateRef<any>;\r\n\r\n    lastResizerHelperX: number;\r\n\r\n    reorderIconWidth: number;\r\n\r\n    reorderIconHeight: number;\r\n\r\n    draggedColumn: any;\r\n\r\n    dropPosition: number;\r\n\r\n    preventSelectionSetterPropagation: boolean;\r\n\r\n    _selection: any;\r\n\r\n    selectionKeys: any = {};\r\n\r\n    rowTouched: boolean;\r\n\r\n    editingCell: Element;\r\n\r\n    editingCellData: any;\r\n\r\n    editingCellField: any;\r\n\r\n    editingCellClick: boolean;\r\n\r\n    documentEditListener: any;\r\n\r\n    initialized: boolean;\r\n\r\n    toggleRowIndex: number;\r\n\r\n    ngOnInit() {\r\n        if (this.lazy && this.lazyLoadOnInit) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        this.initialized = true;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'caption':\r\n                    this.captionTemplate = item.template;\r\n                break;\r\n\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                break;\r\n\r\n                case 'body':\r\n                    this.bodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'loadingbody':\r\n                    this.loadingBodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'footer':\r\n                    this.footerTemplate = item.template;\r\n                break;\r\n\r\n                case 'summary':\r\n                    this.summaryTemplate = item.template;\r\n                break;\r\n\r\n                case 'colgroup':\r\n                    this.colGroupTemplate = item.template;\r\n                break;\r\n\r\n                case 'emptymessage':\r\n                    this.emptyMessageTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorleft':\r\n                    this.paginatorLeftTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorright':\r\n                    this.paginatorRightTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatordropdownitem':\r\n                    this.paginatorDropdownItemTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenheader':\r\n                    this.frozenHeaderTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenbody':\r\n                    this.frozenBodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenfooter':\r\n                    this.frozenFooterTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozencolgroup':\r\n                    this.frozenColGroupTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService, public filterService: FilterService) {}\r\n\r\n    ngOnChanges(simpleChange: SimpleChanges) {\r\n        if (simpleChange.value) {\r\n            this._value = simpleChange.value.currentValue;\r\n\r\n            if (!this.lazy) {\r\n                this.totalRecords = (this._value ? this._value.length : 0);\r\n\r\n                if (this.sortMode == 'single' && this.sortField)\r\n                    this.sortSingle();\r\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\r\n                    this.sortMultiple();\r\n                else if (this.hasFilter())       //sort already filters\r\n                    this._filter();\r\n            }\r\n\r\n            this.updateSerializedValue();\r\n            this.tableService.onUIUpdate(this.value);\r\n        }\r\n\r\n        if (simpleChange.sortField) {\r\n            this._sortField = simpleChange.sortField.currentValue;\r\n\r\n            //avoid triggering lazy load prior to lazy initialization at onInit\r\n            if ( !this.lazy || this.initialized ) {\r\n                if (this.sortMode === 'single') {\r\n                    this.sortSingle();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (simpleChange.sortOrder) {\r\n            this._sortOrder = simpleChange.sortOrder.currentValue;\r\n\r\n            //avoid triggering lazy load prior to lazy initialization at onInit\r\n            if ( !this.lazy || this.initialized ) {\r\n                if (this.sortMode === 'single') {\r\n                    this.sortSingle();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (simpleChange.multiSortMeta) {\r\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\r\n            if (this.sortMode === 'multiple') {\r\n                this.sortMultiple();\r\n            }\r\n        }\r\n\r\n        if (simpleChange.selection) {\r\n            this._selection = simpleChange.selection.currentValue;\r\n\r\n            if (!this.preventSelectionSetterPropagation) {\r\n                this.updateSelectionKeys();\r\n                this.tableService.onSelectionChange();\r\n            }\r\n            this.preventSelectionSetterPropagation = false;\r\n        }\r\n    }\r\n\r\n    @Input() get value(): any[] {\r\n        return this._value;\r\n    }\r\n    set value(val: any[]) {\r\n        this._value = val;\r\n    }\r\n\r\n    updateSerializedValue() {\r\n        this.serializedValue = [];\r\n\r\n        if (this.paginator)\r\n            this.serializePageNodes();\r\n        else\r\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\r\n    }\r\n\r\n    serializeNodes(parent, nodes, level, visible) {\r\n        if (nodes && nodes.length) {\r\n            for(let node of nodes) {\r\n                node.parent = parent;\r\n                const rowNode = {\r\n                    node: node,\r\n                    parent: parent,\r\n                    level: level,\r\n                    visible: visible && (parent ? parent.expanded : true)\r\n                };\r\n                this.serializedValue.push(rowNode);\r\n\r\n                if (rowNode.visible && node.expanded) {\r\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    serializePageNodes() {\r\n        let data = this.filteredNodes || this.value;\r\n        this.serializedValue = [];\r\n        if (data && data.length) {\r\n            const first = this.lazy ? 0 : this.first;\r\n\r\n            for(let i = first; i < (first + this.rows); i++) {\r\n                let node = data[i];\r\n                if (node) {\r\n                    this.serializedValue.push({\r\n                        node: node,\r\n                        parent: null,\r\n                        level: 0,\r\n                        visible: true\r\n                    });\r\n\r\n                    this.serializeNodes(node, node.children, 1, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Input() get totalRecords(): number {\r\n        return this._totalRecords;\r\n    }\r\n    set totalRecords(val: number) {\r\n        this._totalRecords = val;\r\n        this.tableService.onTotalRecordsChange(this._totalRecords);\r\n    }\r\n\r\n    @Input() get sortField(): string {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(val: string) {\r\n        this._sortField = val;\r\n    }\r\n\r\n    @Input() get sortOrder(): number {\r\n        return this._sortOrder;\r\n    }\r\n    set sortOrder(val: number) {\r\n        this._sortOrder = val;\r\n    }\r\n\r\n    @Input() get multiSortMeta(): SortMeta[] {\r\n        return this._multiSortMeta;\r\n    }\r\n\r\n    set multiSortMeta(val: SortMeta[]) {\r\n        this._multiSortMeta = val;\r\n    }\r\n\r\n    @Input() get selection(): any {\r\n        return this._selection;\r\n    }\r\n\r\n    set selection(val: any) {\r\n        this._selection = val;\r\n    }\r\n\r\n    updateSelectionKeys() {\r\n        if (this.dataKey && this._selection) {\r\n            this.selectionKeys = {};\r\n            if (Array.isArray(this._selection)) {\r\n                for(let node of this._selection) {\r\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\r\n                }\r\n            }\r\n            else {\r\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageChange(event) {\r\n        this.first = event.first;\r\n        this.rows = event.rows;\r\n\r\n        if (this.lazy)\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        else\r\n            this.serializePageNodes();\r\n\r\n        this.onPage.emit({\r\n            first: this.first,\r\n            rows: this.rows\r\n        });\r\n\r\n        this.tableService.onUIUpdate(this.value);\r\n\r\n        if (this.scrollable) {\r\n            this.resetScrollTop();\r\n        }\r\n    }\r\n\r\n    sort(event) {\r\n        let originalEvent = event.originalEvent;\r\n\r\n        if (this.sortMode === 'single') {\r\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\r\n            this._sortField = event.field;\r\n            this.sortSingle();\r\n\r\n            if (this.resetPageOnSort && this.scrollable) {\r\n                this.resetScrollTop();\r\n            }\r\n        }\r\n        if (this.sortMode === 'multiple') {\r\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\r\n            let sortMeta = this.getSortMeta(event.field);\r\n\r\n            if (sortMeta) {\r\n                if (!metaKey) {\r\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\r\n\r\n                    if (this.resetPageOnSort && this.scrollable) {\r\n                        this.resetScrollTop();\r\n                    }\r\n                }\r\n                else {\r\n                    sortMeta.order = sortMeta.order * -1;\r\n                }\r\n            }\r\n            else {\r\n                if (!metaKey || !this.multiSortMeta) {\r\n                    this._multiSortMeta = [];\r\n\r\n                    if (this.resetPageOnSort && this.scrollable) {\r\n                        this.resetScrollTop();\r\n                    }\r\n                }\r\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\r\n            }\r\n\r\n            this.sortMultiple();\r\n        }\r\n    }\r\n\r\n    sortSingle() {\r\n        if (this.sortField && this.sortOrder) {\r\n            if (this.lazy) {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }\r\n            else if (this.value) {\r\n                this.sortNodes(this.value);\r\n\r\n                if (this.hasFilter()) {\r\n                    this._filter();\r\n                }\r\n            }\r\n\r\n            let sortMeta: SortMeta = {\r\n                field: this.sortField,\r\n                order: this.sortOrder\r\n            };\r\n\r\n            this.onSort.emit(sortMeta);\r\n            this.tableService.onSort(sortMeta);\r\n            this.updateSerializedValue();\r\n        }\r\n    }\r\n\r\n    sortNodes(nodes) {\r\n        if (!nodes || nodes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.customSort) {\r\n            this.sortFunction.emit({\r\n                data: nodes,\r\n                mode: this.sortMode,\r\n                field: this.sortField,\r\n                order: this.sortOrder\r\n            });\r\n        }\r\n        else {\r\n            nodes.sort((node1, node2) => {\r\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\r\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\r\n                let result = null;\r\n\r\n                if (value1 == null && value2 != null)\r\n                    result = -1;\r\n                else if (value1 != null && value2 == null)\r\n                    result = 1;\r\n                else if (value1 == null && value2 == null)\r\n                    result = 0;\r\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\r\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\r\n                else\r\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\r\n\r\n                return (this.sortOrder * result);\r\n            });\r\n        }\r\n\r\n        for(let node of nodes) {\r\n            this.sortNodes(node.children);\r\n        }\r\n    }\r\n\r\n    sortMultiple() {\r\n        if (this.multiSortMeta) {\r\n            if (this.lazy) {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }\r\n            else if (this.value) {\r\n               this.sortMultipleNodes(this.value);\r\n\r\n                if (this.hasFilter()) {\r\n                    this._filter();\r\n                }\r\n            }\r\n\r\n            this.onSort.emit({\r\n                multisortmeta: this.multiSortMeta\r\n            });\r\n            this.updateSerializedValue();\r\n            this.tableService.onSort(this.multiSortMeta);\r\n        }\r\n    }\r\n\r\n    sortMultipleNodes(nodes) {\r\n        if (!nodes || nodes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.customSort) {\r\n            this.sortFunction.emit({\r\n                data: this.value,\r\n                mode: this.sortMode,\r\n                multiSortMeta: this.multiSortMeta\r\n            });\r\n        }\r\n        else {\r\n            nodes.sort((node1, node2) => {\r\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\r\n            });\r\n        }\r\n\r\n        for(let node of nodes) {\r\n            this.sortMultipleNodes(node.children);\r\n        }\r\n    }\r\n\r\n    multisortField(node1, node2, multiSortMeta, index) {\r\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\r\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\r\n        let result = null;\r\n\r\n        if (value1 == null && value2 != null)\r\n            result = -1;\r\n        else if (value1 != null && value2 == null)\r\n            result = 1;\r\n        else if (value1 == null && value2 == null)\r\n            result = 0;\r\n        if (typeof value1 == 'string' || value1 instanceof String) {\r\n            if (value1.localeCompare && (value1 != value2)) {\r\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\r\n            }\r\n        }\r\n        else {\r\n            result = (value1 < value2) ? -1 : 1;\r\n        }\r\n\r\n        if (value1 == value2) {\r\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\r\n        }\r\n\r\n        return (multiSortMeta[index].order * result);\r\n    }\r\n\r\n    getSortMeta(field: string) {\r\n        if (this.multiSortMeta && this.multiSortMeta.length) {\r\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\r\n                if (this.multiSortMeta[i].field === field) {\r\n                    return this.multiSortMeta[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    isSorted(field: string) {\r\n        if (this.sortMode === 'single') {\r\n            return (this.sortField && this.sortField === field);\r\n        }\r\n        else if (this.sortMode === 'multiple') {\r\n            let sorted = false;\r\n            if (this.multiSortMeta) {\r\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\r\n                    if (this.multiSortMeta[i].field == field) {\r\n                        sorted = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return sorted;\r\n        }\r\n    }\r\n\r\n    createLazyLoadMetadata(): any {\r\n        return {\r\n            first: this.first,\r\n            rows: this.rows,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            filters: this.filters,\r\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\r\n            multiSortMeta: this.multiSortMeta\r\n        };\r\n    }\r\n\r\n    public resetScrollTop() {\r\n        if (this.virtualScroll)\r\n            this.scrollToVirtualIndex(0);\r\n        else\r\n            this.scrollTo({top: 0});\r\n    }\r\n\r\n    public scrollToVirtualIndex(index: number) {\r\n        if (this.scrollableViewChild) {\r\n            this.scrollableViewChild.scrollToVirtualIndex(index);\r\n        }\r\n\r\n        if (this.scrollableFrozenViewChild) {\r\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\r\n        }\r\n    }\r\n\r\n    public scrollTo(options) {\r\n        if (this.scrollableViewChild) {\r\n            this.scrollableViewChild.scrollTo(options);\r\n        }\r\n\r\n        if (this.scrollableFrozenViewChild) {\r\n            this.scrollableFrozenViewChild.scrollTo(options);\r\n        }\r\n    }\r\n\r\n    isEmpty() {\r\n        let data = this.filteredNodes||this.value;\r\n        return data == null || data.length == 0;\r\n    }\r\n\r\n    getBlockableElement(): HTMLElement {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n\r\n    onColumnResizeBegin(event) {\r\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\r\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onColumnResize(event) {\r\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\r\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\r\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\r\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\r\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\r\n\r\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    onColumnResizeEnd(event, column) {\r\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\r\n        let columnWidth = column.offsetWidth;\r\n        let newColumnWidth = columnWidth + delta;\r\n        let minWidth = column.style.minWidth || 15;\r\n\r\n        if (columnWidth + delta > parseInt(minWidth)) {\r\n            if (this.columnResizeMode === 'fit') {\r\n                let nextColumn = column.nextElementSibling;\r\n                while (!nextColumn.offsetParent) {\r\n                    nextColumn = nextColumn.nextElementSibling;\r\n                }\r\n\r\n                if (nextColumn) {\r\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\r\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\r\n\r\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\r\n                        if (this.scrollable) {\r\n                            let scrollableView = this.findParentScrollableView(column);\r\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-treetable-virtual-scrollable-body table');\r\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\r\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\r\n                            let resizeColumnIndex = DomHandler.index(column);\r\n\r\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                        }\r\n                        else {\r\n                            column.style.width = newColumnWidth + 'px';\r\n                            if (nextColumn) {\r\n                                nextColumn.style.width = nextColumnWidth + 'px';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (this.columnResizeMode === 'expand') {\r\n                if (this.scrollable) {\r\n                    let scrollableView = this.findParentScrollableView(column);\r\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\r\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\r\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\r\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\r\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\r\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\r\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\r\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\r\n                    if (scrollableFooterTable) {\r\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\r\n                    }\r\n                    let resizeColumnIndex = DomHandler.index(column);\r\n\r\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\r\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\r\n                    const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\r\n\r\n                    let setWidth = (container, table, width, isContainerInViewport) => {\r\n                        if (container && table) {\r\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\r\n                            table.style.width = width + 'px';\r\n                        }\r\n                    };\r\n\r\n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\r\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\r\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\r\n\r\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\r\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\r\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\r\n                }\r\n                else {\r\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\r\n                    column.style.width = newColumnWidth + 'px';\r\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\r\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\r\n                }\r\n            }\r\n\r\n            this.onColResize.emit({\r\n                element: column,\r\n                delta: delta\r\n            });\r\n        }\r\n\r\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\r\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\r\n    }\r\n\r\n    findParentScrollableView(column) {\r\n        if (column) {\r\n            let parent = column.parentElement;\r\n            while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\r\n                parent = parent.parentElement;\r\n            }\r\n\r\n            return parent;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\r\n        if (table) {\r\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\r\n\r\n            if (colGroup) {\r\n                let col = colGroup.children[resizeColumnIndex];\r\n                let nextCol = col.nextElementSibling;\r\n                col.style.width = newColumnWidth + 'px';\r\n\r\n                if (nextCol && nextColumnWidth) {\r\n                    nextCol.style.width = nextColumnWidth + 'px';\r\n                }\r\n            }\r\n            else {\r\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnDragStart(event, columnElement) {\r\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\r\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\r\n        this.draggedColumn = columnElement;\r\n        event.dataTransfer.setData('text', 'b');    // For firefox\r\n    }\r\n\r\n    onColumnDragEnter(event, dropHeader) {\r\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\r\n            event.preventDefault();\r\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\r\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\r\n\r\n            if (this.draggedColumn != dropHeader) {\r\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\r\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\r\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\r\n\r\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\r\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\r\n\r\n                if (event.pageX > columnCenter) {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.dropPosition = 1;\r\n                }\r\n                else {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.dropPosition = -1;\r\n                }\r\n\r\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\r\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\r\n            }\r\n            else {\r\n                event.dataTransfer.dropEffect = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnDragLeave(event) {\r\n        if (this.reorderableColumns && this.draggedColumn) {\r\n            event.preventDefault();\r\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\r\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    onColumnDrop(event, dropColumn) {\r\n        event.preventDefault();\r\n        if (this.draggedColumn) {\r\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\r\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\r\n            let allowDrop = (dragIndex != dropIndex);\r\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\r\n                allowDrop = false;\r\n            }\r\n\r\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\r\n                dropIndex = dropIndex + 1;\r\n            }\r\n\r\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\r\n                dropIndex = dropIndex - 1;\r\n            }\r\n\r\n            if (allowDrop) {\r\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\r\n\r\n                this.onColReorder.emit({\r\n                    dragIndex: dragIndex,\r\n                    dropIndex: dropIndex,\r\n                    columns: this.columns\r\n                });\r\n            }\r\n\r\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\r\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\r\n            this.draggedColumn.draggable = false;\r\n            this.draggedColumn = null;\r\n            this.dropPosition = null;\r\n        }\r\n    }\r\n\r\n    handleRowClick(event) {\r\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\r\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\r\n            return;\r\n        }\r\n\r\n        if (this.selectionMode) {\r\n            this.preventSelectionSetterPropagation = true;\r\n            let rowNode = event.rowNode;\r\n            let selected = this.isSelected(rowNode.node);\r\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\r\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\r\n\r\n            if (metaSelection) {\r\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\r\n\r\n                if (selected && metaKey) {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        this._selection = null;\r\n                        this.selectionKeys = {};\r\n                        this.selectionChange.emit(null);\r\n                    }\r\n                    else {\r\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\r\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\r\n                        this.selectionChange.emit(this.selection);\r\n                        if (dataKeyValue) {\r\n                            delete this.selectionKeys[dataKeyValue];\r\n                        }\r\n                    }\r\n\r\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\r\n                }\r\n                else {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        this._selection = rowNode.node;\r\n                        this.selectionChange.emit(rowNode.node);\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys = {};\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n                    else if (this.isMultipleSelectionMode()) {\r\n                        if (metaKey) {\r\n                            this._selection = this.selection||[];\r\n                        }\r\n                        else {\r\n                            this._selection = [];\r\n                            this.selectionKeys = {};\r\n                        }\r\n\r\n                        this._selection = [...this.selection, rowNode.node];\r\n                        this.selectionChange.emit(this.selection);\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n\r\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\r\n                }\r\n            }\r\n            else {\r\n                if (this.selectionMode === 'single') {\r\n                    if (selected) {\r\n                        this._selection = null;\r\n                        this.selectionKeys = {};\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\r\n                    }\r\n                    else {\r\n                        this._selection = rowNode.node;\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys = {};\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n                }\r\n                else if (this.selectionMode === 'multiple') {\r\n                    if (selected) {\r\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\r\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\r\n                        if (dataKeyValue) {\r\n                            delete this.selectionKeys[dataKeyValue];\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.tableService.onSelectionChange();\r\n        }\r\n\r\n        this.rowTouched = false;\r\n    }\r\n\r\n    handleRowTouchEnd(event) {\r\n        this.rowTouched = true;\r\n    }\r\n\r\n    handleRowRightClick(event) {\r\n        if (this.contextMenu) {\r\n            const node = event.rowNode.node;\r\n\r\n            if (this.contextMenuSelectionMode === 'separate') {\r\n                this.contextMenuSelection = node;\r\n                this.contextMenuSelectionChange.emit(node);\r\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\r\n                this.contextMenu.show(event.originalEvent);\r\n                this.tableService.onContextMenu(node);\r\n            }\r\n            else if (this.contextMenuSelectionMode === 'joint') {\r\n                this.preventSelectionSetterPropagation = true;\r\n                let selected = this.isSelected(node);\r\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\r\n\r\n                if (!selected) {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        this.selection = node;\r\n                        this.selectionChange.emit(node);\r\n                    }\r\n                    else if (this.isMultipleSelectionMode()) {\r\n                        this.selection = [node];\r\n                        this.selectionChange.emit(this.selection);\r\n                    }\r\n\r\n                    if (dataKeyValue) {\r\n                        this.selectionKeys[dataKeyValue] = 1;\r\n                    }\r\n                }\r\n\r\n                this.contextMenu.show(event.originalEvent);\r\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleNodeWithCheckbox(event) {\r\n        this.selection = this.selection||[];\r\n        this.preventSelectionSetterPropagation = true;\r\n        let node = event.rowNode.node;\r\n        let selected = this.isSelected(node);\r\n\r\n        if (selected) {\r\n            this.propagateSelectionDown(node, false);\r\n            if (event.rowNode.parent) {\r\n                this.propagateSelectionUp(node.parent, false);\r\n            }\r\n            this.selectionChange.emit(this.selection);\r\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n        }\r\n        else {\r\n            this.propagateSelectionDown(node, true);\r\n            if (event.rowNode.parent) {\r\n                this.propagateSelectionUp(node.parent, true);\r\n            }\r\n            this.selectionChange.emit(this.selection);\r\n            this.onNodeSelect.emit({originalEvent: event, node: node});\r\n        }\r\n\r\n        this.tableService.onSelectionChange();\r\n    }\r\n\r\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\r\n        let data = this.filteredNodes || this.value;\r\n        this._selection = check && data ? data.slice() : [];\r\n        if (check) {\r\n            if (data && data.length) {\r\n                for (let node of data) {\r\n                    this.propagateSelectionDown(node, true);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._selection = [];\r\n            this.selectionKeys = {};\r\n        }\r\n\r\n        this.preventSelectionSetterPropagation = true;\r\n        this.selectionChange.emit(this._selection);\r\n        this.tableService.onSelectionChange();\r\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\r\n    }\r\n\r\n    propagateSelectionUp(node: TreeNode, select: boolean) {\r\n        if (node.children && node.children.length) {\r\n            let selectedChildCount: number = 0;\r\n            let childPartialSelected: boolean = false;\r\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\r\n\r\n            for (let child of node.children) {\r\n                if (this.isSelected(child))\r\n                selectedChildCount++;\r\n                else if (child.partialSelected)\r\n                    childPartialSelected = true;\r\n            }\r\n\r\n            if (select && selectedChildCount == node.children.length) {\r\n                this._selection =  [...this.selection||[], node];\r\n                node.partialSelected = false;\r\n                if (dataKeyValue) {\r\n                    this.selectionKeys[dataKeyValue] = 1;\r\n                }\r\n            }\r\n            else {\r\n                if (!select) {\r\n                    let index = this.findIndexInSelection(node);\r\n                    if (index >= 0) {\r\n                        this._selection =  this.selection.filter((val,i) => i!=index);\r\n\r\n                        if (dataKeyValue) {\r\n                            delete this.selectionKeys[dataKeyValue];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\r\n                    node.partialSelected = true;\r\n                else\r\n                    node.partialSelected = false;\r\n            }\r\n        }\r\n\r\n        let parent = node.parent;\r\n        if (parent) {\r\n            this.propagateSelectionUp(parent, select);\r\n        }\r\n    }\r\n\r\n    propagateSelectionDown(node: TreeNode, select: boolean) {\r\n        let index = this.findIndexInSelection(node);\r\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\r\n\r\n        if (select && index == -1) {\r\n            this._selection =  [...this.selection||[],node]\r\n            if (dataKeyValue) {\r\n                this.selectionKeys[dataKeyValue] = 1;\r\n            }\r\n        }\r\n        else if (!select && index > -1) {\r\n            this._selection =  this.selection.filter((val,i) => i!=index);\r\n            if (dataKeyValue) {\r\n                delete this.selectionKeys[dataKeyValue];\r\n            }\r\n        }\r\n\r\n        node.partialSelected = false;\r\n\r\n        if (node.children && node.children.length) {\r\n            for (let child of node.children) {\r\n                this.propagateSelectionDown(child, select);\r\n            }\r\n        }\r\n    }\r\n\r\n    isSelected(node) {\r\n        if (node && this.selection) {\r\n            if (this.dataKey) {\r\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\r\n            }\r\n            else {\r\n                if (this.selection instanceof Array)\r\n                    return this.findIndexInSelection(node) > -1;\r\n                else\r\n                    return this.equals(node, this.selection);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    findIndexInSelection(node: any) {\r\n        let index: number = -1;\r\n        if (this.selection && this.selection.length) {\r\n            for (let i = 0; i < this.selection.length; i++) {\r\n                if (this.equals(node, this.selection[i])) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    isSingleSelectionMode() {\r\n        return this.selectionMode === 'single';\r\n    }\r\n\r\n    isMultipleSelectionMode() {\r\n        return this.selectionMode === 'multiple';\r\n    }\r\n\r\n    equals(node1, node2) {\r\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\r\n    }\r\n\r\n    filter(value, field, matchMode) {\r\n        if (this.filterTimeout) {\r\n            clearTimeout(this.filterTimeout);\r\n        }\r\n\r\n        if (!this.isFilterBlank(value)) {\r\n            this.filters[field] = { value: value, matchMode: matchMode };\r\n        } else if (this.filters[field]) {\r\n            delete this.filters[field];\r\n        }\r\n\r\n        this.filterTimeout = setTimeout(() => {\r\n            this._filter();\r\n            this.filterTimeout = null;\r\n        }, this.filterDelay);\r\n    }\r\n\r\n    filterGlobal(value, matchMode) {\r\n        this.filter(value, 'global', matchMode);\r\n    }\r\n\r\n    isFilterBlank(filter: any): boolean {\r\n        if (filter !== null && filter !== undefined) {\r\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\r\n                return true;\r\n            else\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _filter() {\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else {\r\n            if (!this.value) {\r\n                return;\r\n            }\r\n\r\n            if (!this.hasFilter()) {\r\n                this.filteredNodes = null;\r\n                if (this.paginator) {\r\n                    this.totalRecords = this.value ? this.value.length : 0;\r\n                }\r\n            }\r\n            else {\r\n                let globalFilterFieldsArray;\r\n                if (this.filters['global']) {\r\n                    if (!this.columns && !this.globalFilterFields)\r\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\r\n                    else\r\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\r\n                }\r\n\r\n                this.filteredNodes = [];\r\n                const isStrictMode = this.filterMode === 'strict';\r\n                let isValueChanged = false;\r\n\r\n                for (let node of this.value) {\r\n                    let copyNode = {...node};\r\n                    let localMatch = true;\r\n                    let globalMatch = false;\r\n                    let paramsWithoutNode;\r\n\r\n                    for (let prop in this.filters) {\r\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\r\n                            let filterMeta = this.filters[prop];\r\n                            let filterField = prop;\r\n                            let filterValue = filterMeta.value;\r\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\r\n                            let filterConstraint = this.filterService.filters[filterMatchMode];\r\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\r\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\r\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\r\n                                    localMatch = false;\r\n                            }\r\n\r\n                            if (!localMatch) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\r\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\r\n                            let copyNodeForGlobal = {...copyNode};\r\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\r\n                            let filterValue = this.filters['global'].value;\r\n                            let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\r\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\r\n\r\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\r\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\r\n                                    globalMatch = true;\r\n                                    copyNode = copyNodeForGlobal;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    let matches = localMatch;\r\n                    if (this.filters['global']) {\r\n                        matches = localMatch && globalMatch;\r\n                    }\r\n\r\n                    if (matches) {\r\n                        this.filteredNodes.push(copyNode);\r\n                    }\r\n\r\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\r\n                }\r\n\r\n                if (!isValueChanged) {\r\n                    this.filteredNodes = null;\r\n                }\r\n\r\n                if (this.paginator) {\r\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.first = 0;\r\n\r\n        const filteredValue = this.filteredNodes || this.value;\r\n\r\n        this.onFilter.emit({\r\n            filters: this.filters,\r\n            filteredValue: filteredValue\r\n        });\r\n\r\n        this.tableService.onUIUpdate(filteredValue);\r\n        this.updateSerializedValue();\r\n\r\n        if (this.scrollable) {\r\n            this.resetScrollTop();\r\n        }\r\n    }\r\n\r\n    findFilteredNodes(node, paramsWithoutNode) {\r\n        if (node) {\r\n            let matched = false;\r\n            if (node.children) {\r\n                let childNodes = [...node.children];\r\n                node.children = [];\r\n                for (let childNode of childNodes) {\r\n                    let copyChildNode = {...childNode};\r\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\r\n                        matched = true;\r\n                        node.children.push(copyChildNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (matched) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\r\n        let matched = false;\r\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\r\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\r\n            matched = true;\r\n        }\r\n\r\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\r\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\r\n        }\r\n\r\n        return matched;\r\n    }\r\n\r\n    isNodeLeaf(node) {\r\n        return node.leaf === false ? false : !(node.children && node.children.length);\r\n    }\r\n\r\n    hasFilter() {\r\n        let empty = true;\r\n        for (let prop in this.filters) {\r\n            if (this.filters.hasOwnProperty(prop)) {\r\n                empty = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return !empty;\r\n    }\r\n\r\n    public reset() {\r\n        this._sortField = null;\r\n        this._sortOrder = 1;\r\n        this._multiSortMeta = null;\r\n        this.tableService.onSort(null);\r\n\r\n        this.filteredNodes = null;\r\n        this.filters = {};\r\n\r\n        this.first = 0;\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else {\r\n            this.totalRecords = (this._value ? this._value.length : 0);\r\n        }\r\n    }\r\n\r\n    updateEditingCell(cell, data, field) {\r\n        this.editingCell = cell;\r\n        this.editingCellData = data;\r\n        this.editingCellField = field;\r\n        this.bindDocumentEditListener();\r\n    }\r\n\r\n    isEditingCellValid() {\r\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\r\n    }\r\n\r\n    bindDocumentEditListener() {\r\n        if (!this.documentEditListener) {\r\n            this.documentEditListener = (event) => {\r\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\r\n                    this.editingCell = null;\r\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData });\r\n                    this.editingCellField = null;\r\n                    this.editingCellData = null;\r\n                    this.unbindDocumentEditListener();\r\n                }\r\n\r\n                this.editingCellClick = false;\r\n            };\r\n\r\n            document.addEventListener('click', this.documentEditListener);\r\n        }\r\n    }\r\n\r\n    unbindDocumentEditListener() {\r\n        if (this.documentEditListener) {\r\n            document.removeEventListener('click', this.documentEditListener);\r\n            this.documentEditListener = null;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDocumentEditListener();\r\n        this.editingCell = null;\r\n        this.editingCellField = null;\r\n        this.editingCellData = null;\r\n        this.initialized = null;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: '[pTreeTableBody]',\r\n    template: `\r\n        <ng-container *ngIf=\"!tt.virtualScroll\">\r\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\r\n                <ng-container *ngIf=\"serializedNode.visible\">\r\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\r\n                </ng-container>\r\n            </ng-template>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"tt.virtualScroll\">\r\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\r\n                <ng-container *ngIf=\"serializedNode.visible\">\r\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\r\n                </ng-container>\r\n            </ng-template>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"tt.isEmpty()\">\r\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\r\n        </ng-container>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TTBody {\r\n\r\n    @Input(\"pTreeTableBody\") columns: any[];\r\n\r\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\r\n\r\n    @Input() frozen: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public treeTableService: TreeTableService, public cd: ChangeDetectorRef) {\r\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\r\n            if (this.tt.virtualScroll) {\r\n                this.cd.detectChanges();\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: '[ttScrollableView]',\r\n    template: `\r\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\r\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\r\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <thead class=\"p-treetable-thead\">\r\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\r\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\">\r\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\r\n                </table>\r\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\r\n            </div>\r\n        </ng-container>\r\n        <ng-template #virtualScrollTemplate>\r\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\r\n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\r\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\r\n                </table>\r\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\r\n            </cdk-virtual-scroll-viewport>\r\n        </ng-template>\r\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\r\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\r\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <tfoot class=\"p-treetable-tfoot\">\r\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </tfoot>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TTScrollableView implements AfterViewInit, OnDestroy {\r\n\r\n    @Input(\"ttScrollableView\") columns: any[];\r\n\r\n    @Input() frozen: boolean;\r\n\r\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\r\n\r\n    @ViewChild('loadingTable') scrollLoadingTableViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\r\n\r\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\r\n\r\n    headerScrollListener;\r\n\r\n    bodyScrollListener;\r\n\r\n    footerScrollListener;\r\n\r\n    frozenSiblingBody: Element;\r\n\r\n    totalRecordsSubscription: Subscription;\r\n\r\n    _scrollHeight: string;\r\n\r\n    preventBodyScrollPropagation: boolean;\r\n\r\n    @Input() get scrollHeight(): string {\r\n        return this._scrollHeight;\r\n    }\r\n    set scrollHeight(val: string) {\r\n        this._scrollHeight = val;\r\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\r\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\r\n        }\r\n\r\n        if (this.tt.virtualScroll && this.virtualScrollBody) {\r\n            this.virtualScrollBody.ngOnInit();\r\n        }\r\n    }\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    ngAfterViewInit() {\r\n        if (!this.frozen) {\r\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\r\n                DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\r\n            }\r\n\r\n            let frozenView = this.el.nativeElement.previousElementSibling;\r\n            if (frozenView) {\r\n                if (this.tt.virtualScroll)\r\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-virtual-scrollable-body');\r\n                else\r\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\r\n            }\r\n\r\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\r\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\r\n\r\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\r\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\r\n            }\r\n        }\r\n        else {\r\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\r\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\r\n            }\r\n        }\r\n\r\n        this.bindEvents();\r\n    }\r\n\r\n    bindEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\r\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\r\n            }\r\n\r\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n                this.footerScrollListener = this.onFooterScroll.bind(this);\r\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\r\n            }\r\n\r\n            if (!this.frozen) {\r\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\r\n\r\n                if (this.tt.virtualScroll)\r\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\r\n                else\r\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\r\n            }\r\n        });\r\n    }\r\n\r\n    unbindEvents() {\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\r\n        }\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\r\n        }\r\n\r\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\r\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\r\n        }\r\n\r\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\r\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\r\n        }\r\n    }\r\n\r\n    onHeaderScroll() {\r\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\r\n\r\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\r\n        }\r\n\r\n        this.preventBodyScrollPropagation = true;\r\n    }\r\n\r\n    onFooterScroll() {\r\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\r\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\r\n\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\r\n        }\r\n\r\n        this.preventBodyScrollPropagation = true;\r\n    }\r\n\r\n    onBodyScroll(event) {\r\n        if (this.preventBodyScrollPropagation) {\r\n            this.preventBodyScrollPropagation = false;\r\n            return;\r\n        }\r\n\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\r\n        }\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\r\n        }\r\n\r\n        if (this.frozenSiblingBody) {\r\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\r\n        }\r\n    }\r\n\r\n    scrollToVirtualIndex(index: number): void {\r\n        if (this.virtualScrollBody) {\r\n            this.virtualScrollBody.scrollToIndex(index);\r\n        }\r\n    }\r\n\r\n    scrollTo(options): void {\r\n        if (this.virtualScrollBody) {\r\n            this.virtualScrollBody.scrollTo(options);\r\n        }\r\n        else {\r\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\r\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\r\n            }\r\n            else {\r\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\r\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindEvents();\r\n\r\n        this.frozenSiblingBody = null;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttSortableColumn]',\r\n    host: {\r\n        '[class.p-sortable-column]': 'isEnabled()',\r\n        '[class.p-highlight]': 'sorted',\r\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\r\n        '[attr.role]': '\"columnheader\"'\r\n    }\r\n})\r\nexport class TTSortableColumn implements OnInit, OnDestroy {\r\n\r\n    @Input(\"ttSortableColumn\") field: string;\r\n\r\n    @Input() ttSortableColumnDisabled: boolean;\r\n\r\n    sorted: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\r\n                this.updateSortState();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.updateSortState();\r\n        }\r\n    }\r\n\r\n    updateSortState() {\r\n        this.sorted = this.tt.isSorted(this.field);\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            this.updateSortState();\r\n            this.tt.sort({\r\n                originalEvent: event,\r\n                field: this.field\r\n            });\r\n\r\n            DomHandler.clearSelection();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown.enter', ['$event'])\r\n    onEnterKey(event: MouseEvent) {\r\n        this.onClick(event);\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttSortableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableSortIcon',\r\n    template: `\r\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TTSortIcon implements OnInit, OnDestroy {\r\n\r\n    @Input() field: string;\r\n\r\n    @Input() ariaLabelDesc: string;\r\n\r\n    @Input() ariaLabelAsc: string;\r\n\r\n    subscription: Subscription;\r\n\r\n    sortOrder: number;\r\n\r\n    constructor(public tt: TreeTable, public cd: ChangeDetectorRef) {\r\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\r\n            this.updateSortState();\r\n            this.cd.markForCheck();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.updateSortState();\r\n    }\r\n\r\n    onClick(event){\r\n        event.preventDefault();\r\n    }\r\n\r\n    updateSortState() {\r\n        if (this.tt.sortMode === 'single') {\r\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\r\n        }\r\n        else if (this.tt.sortMode === 'multiple') {\r\n            let sortMeta = this.tt.getSortMeta(this.field);\r\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttResizableColumn]'\r\n})\r\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() ttResizableColumnDisabled: boolean;\r\n\r\n    resizer: HTMLSpanElement;\r\n\r\n    resizerMouseDownListener: any;\r\n\r\n    documentMouseMoveListener: any;\r\n\r\n    documentMouseUpListener: any;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\r\n            this.resizer = document.createElement('span');\r\n            this.resizer.className = 'p-column-resizer';\r\n            this.el.nativeElement.appendChild(this.resizer);\r\n\r\n            this.zone.runOutsideAngular(() => {\r\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\r\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\r\n            });\r\n        }\r\n    }\r\n\r\n    bindDocumentEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\r\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\r\n\r\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\r\n            document.addEventListener('mouseup', this.documentMouseUpListener);\r\n        });\r\n    }\r\n\r\n    unbindDocumentEvents() {\r\n        if (this.documentMouseMoveListener) {\r\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\r\n            this.documentMouseMoveListener = null;\r\n        }\r\n\r\n        if (this.documentMouseUpListener) {\r\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\r\n            this.documentMouseUpListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event: Event) {\r\n        this.tt.onColumnResizeBegin(event);\r\n        this.bindDocumentEvents();\r\n    }\r\n\r\n    onDocumentMouseMove(event: Event) {\r\n        this.tt.onColumnResize(event);\r\n    }\r\n\r\n    onDocumentMouseUp(event: Event) {\r\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttResizableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.resizerMouseDownListener) {\r\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\r\n        }\r\n\r\n        this.unbindDocumentEvents();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttReorderableColumn]'\r\n})\r\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() ttReorderableColumnDisabled: boolean;\r\n\r\n    dragStartListener: any;\r\n\r\n    dragOverListener: any;\r\n\r\n    dragEnterListener: any;\r\n\r\n    dragLeaveListener: any;\r\n\r\n    mouseDownListener: any;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            this.bindEvents();\r\n        }\r\n    }\r\n\r\n    bindEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\r\n\r\n            this.dragStartListener = this.onDragStart.bind(this);\r\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\r\n\r\n            this.dragOverListener = this.onDragEnter.bind(this);\r\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\r\n\r\n            this.dragEnterListener = this.onDragEnter.bind(this);\r\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\r\n\r\n            this.dragLeaveListener = this.onDragLeave.bind(this);\r\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\r\n        });\r\n    }\r\n\r\n    unbindEvents() {\r\n        if (this.mouseDownListener) {\r\n            document.removeEventListener('mousedown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n        }\r\n\r\n        if (this.dragOverListener) {\r\n            document.removeEventListener('dragover', this.dragOverListener);\r\n            this.dragOverListener = null;\r\n        }\r\n\r\n        if (this.dragEnterListener) {\r\n            document.removeEventListener('dragenter', this.dragEnterListener);\r\n            this.dragEnterListener = null;\r\n        }\r\n\r\n        if (this.dragEnterListener) {\r\n            document.removeEventListener('dragenter', this.dragEnterListener);\r\n            this.dragEnterListener = null;\r\n        }\r\n\r\n        if (this.dragLeaveListener) {\r\n            document.removeEventListener('dragleave', this.dragLeaveListener);\r\n            this.dragLeaveListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event) {\r\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\r\n            this.el.nativeElement.draggable = false;\r\n        else\r\n            this.el.nativeElement.draggable = true;\r\n    }\r\n\r\n    onDragStart(event) {\r\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\r\n    }\r\n\r\n    onDragOver(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDragEnter(event) {\r\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\r\n    }\r\n\r\n    onDragLeave(event) {\r\n        this.tt.onColumnDragLeave(event);\r\n    }\r\n\r\n    @HostListener('drop', ['$event'])\r\n    onDrop(event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.onColumnDrop(event, this.el.nativeElement);\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttReorderableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindEvents();\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttSelectableRow]',\r\n    host: {\r\n        '[class.p-highlight]': 'selected'\r\n    }\r\n})\r\nexport class TTSelectableRow implements OnInit, OnDestroy {\r\n\r\n    @Input(\"ttSelectableRow\") rowNode: any;\r\n\r\n    @Input() ttSelectableRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n                this.selected = this.tt.isSelected(this.rowNode.node);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.selected = this.tt.isSelected(this.rowNode.node);\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onEnterKey(event: KeyboardEvent) {\r\n        if (event.which === 13) {\r\n            this.onClick(event);\r\n        }\r\n    }\r\n\r\n    @HostListener('touchend', ['$event'])\r\n    onTouchEnd(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowTouchEnd(event);\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttSelectableRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttSelectableRowDblClick]',\r\n    host: {\r\n        '[class.p-highlight]': 'selected'\r\n    }\r\n})\r\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\r\n\r\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\r\n\r\n    @Input() ttSelectableRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n                this.selected = this.tt.isSelected(this.rowNode.node);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.selected = this.tt.isSelected(this.rowNode.node);\r\n        }\r\n    }\r\n\r\n    @HostListener('dblclick', ['$event'])\r\n    onClick(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttSelectableRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttContextMenuRow]',\r\n    host: {\r\n        '[class.p-highlight-contextmenu]': 'selected',\r\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\r\n    }\r\n})\r\nexport class TTContextMenuRow {\r\n\r\n    @Input(\"ttContextMenuRow\") rowNode: any;\r\n\r\n    @Input() ttContextMenuRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private el: ElementRef) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\r\n                this.selected = this.tt.equals(this.rowNode.node, node);\r\n            });\r\n        }\r\n    }\r\n\r\n    @HostListener('contextmenu', ['$event'])\r\n    onContextMenu(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowRightClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n\r\n            this.el.nativeElement.focus();\r\n\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttContextMenuRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableCheckbox',\r\n    template: `\r\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\r\n            <div class=\"p-hidden-accessible\">\r\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\r\n            </div>\r\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\r\n                'p-highlight':checked, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\r\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\r\n            </div>\r\n        </div>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TTCheckbox  {\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input(\"value\") rowNode: any;\r\n\r\n    @ViewChild('box') boxViewChild: ElementRef;\r\n\r\n    checked: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService, public cd: ChangeDetectorRef) {\r\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n            this.checked = this.tt.isSelected(this.rowNode.node);\r\n            this.cd.markForCheck();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.checked = this.tt.isSelected(this.rowNode.node);\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        if (!this.disabled) {\r\n            this.tt.toggleNodeWithCheckbox({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n        }\r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onFocus() {\r\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    onBlur() {\r\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableHeaderCheckbox',\r\n    template: `\r\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event, cb.checked)\">\r\n            <div class=\"p-hidden-accessible\">\r\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\r\n            </div>\r\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\r\n                'p-highlight':checked, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\r\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\r\n            </div>\r\n        </div>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TTHeaderCheckbox  {\r\n\r\n    @ViewChild('box') boxViewChild: ElementRef;\r\n\r\n    checked: boolean;\r\n\r\n    disabled: boolean;\r\n\r\n    selectionChangeSubscription: Subscription;\r\n\r\n    valueChangeSubscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private cd: ChangeDetectorRef) {\r\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\r\n            this.checked = this.updateCheckedState();\r\n        });\r\n\r\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n            this.checked = this.updateCheckedState();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.checked = this.updateCheckedState();\r\n    }\r\n\r\n    onClick(event: Event, checked) {\r\n        if (this.tt.value && this.tt.value.length > 0) {\r\n            this.tt.toggleNodesWithCheckbox(event, !checked);\r\n        }\r\n\r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onFocus() {\r\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    onBlur() {\r\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.selectionChangeSubscription) {\r\n            this.selectionChangeSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.valueChangeSubscription) {\r\n            this.valueChangeSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    updateCheckedState() {\r\n        this.cd.markForCheck();\r\n        let checked: boolean;\r\n        const data = this.tt.filteredNodes||this.tt.value;\r\n\r\n        if (data) {\r\n            for (let node of data) {\r\n                if (this.tt.isSelected(node)) {\r\n                    checked = true;\r\n                }\r\n                else  {\r\n                    checked = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            checked = false;\r\n        }\r\n\r\n        return checked;\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttEditableColumn]'\r\n})\r\nexport class TTEditableColumn implements AfterViewInit {\r\n\r\n    @Input(\"ttEditableColumn\") data: any;\r\n\r\n    @Input(\"ttEditableColumnField\") field: any;\r\n\r\n    @Input() ttEditableColumnDisabled: boolean;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            this.tt.editingCellClick = true;\r\n\r\n            if (this.tt.editingCell) {\r\n                if (this.tt.editingCell !== this.el.nativeElement) {\r\n                    if (!this.tt.isEditingCellValid()) {\r\n                        return;\r\n                    }\r\n\r\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\r\n                    this.openCell();\r\n                }\r\n            }\r\n            else {\r\n                this.openCell();\r\n            }\r\n        }\r\n    }\r\n\r\n    openCell() {\r\n        this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\r\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\r\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\r\n        this.tt.editingCellClick = true;\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\r\n                if (focusable) {\r\n                    focusable.focus();\r\n                }\r\n            }, 50);\r\n        });\r\n    }\r\n\r\n    closeEditingCell() {\r\n        DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\r\n        this.tt.editingCell = null;\r\n        this.tt.unbindDocumentEditListener();\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        if (this.isEnabled()) {\r\n            //enter\r\n            if (event.keyCode == 13) {\r\n                if (this.tt.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\r\n                    this.closeEditingCell();\r\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\r\n                }\r\n\r\n                event.preventDefault();\r\n            }\r\n\r\n            //escape\r\n            else if (event.keyCode == 27) {\r\n                if (this.tt.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\r\n                    this.closeEditingCell();\r\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\r\n                }\r\n\r\n                event.preventDefault();\r\n            }\r\n\r\n            //tab\r\n            else if (event.keyCode == 9) {\r\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\r\n\r\n                if (event.shiftKey)\r\n                    this.moveToPreviousCell(event);\r\n                else\r\n                    this.moveToNextCell(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    findCell(element) {\r\n        if (element) {\r\n            let cell = element;\r\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\r\n                cell = cell.parentElement;\r\n            }\r\n\r\n            return cell;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    moveToPreviousCell(event: KeyboardEvent) {\r\n        let currentCell = this.findCell(event.target);\r\n        let row = currentCell.parentElement;\r\n        let targetCell = this.findPreviousEditableColumn(currentCell);\r\n\r\n        if (targetCell) {\r\n            DomHandler.invokeElementMethod(targetCell, 'click');\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    moveToNextCell(event: KeyboardEvent) {\r\n        let currentCell = this.findCell(event.target);\r\n        let row = currentCell.parentElement;\r\n        let targetCell = this.findNextEditableColumn(currentCell);\r\n\r\n        if (targetCell) {\r\n            DomHandler.invokeElementMethod(targetCell, 'click');\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    findPreviousEditableColumn(cell: Element) {\r\n        let prevCell = cell.previousElementSibling;\r\n\r\n        if (!prevCell) {\r\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\r\n            if (previousRow) {\r\n                prevCell = previousRow.lastElementChild;\r\n            }\r\n        }\r\n\r\n        if (prevCell) {\r\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\r\n                return prevCell;\r\n            else\r\n                return this.findPreviousEditableColumn(prevCell);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    findNextEditableColumn(cell: Element) {\r\n        let nextCell = cell.nextElementSibling;\r\n\r\n        if (!nextCell) {\r\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\r\n            if (nextRow) {\r\n                nextCell = nextRow.firstElementChild;\r\n            }\r\n        }\r\n\r\n        if (nextCell) {\r\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\r\n                return nextCell;\r\n            else\r\n                return this.findNextEditableColumn(nextCell);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttEditableColumnDisabled !== true;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableCellEditor',\r\n    template: `\r\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\r\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\r\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\r\n        </ng-container>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TreeTableCellEditor implements AfterContentInit {\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\r\n\r\n    inputTemplate: TemplateRef<any>;\r\n\r\n    outputTemplate: TemplateRef<any>;\r\n\r\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'input':\r\n                    this.inputTemplate = item.template;\r\n                    break;\r\n\r\n                case 'output':\r\n                    this.outputTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttRow]',\r\n    host: {\r\n        '[attr.tabindex]': '\"0\"'\r\n    }\r\n})\r\nexport class TTRow {\r\n\r\n    @Input('ttRow') rowNode: any;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        switch (event.which) {\r\n            //down arrow\r\n            case 40:\r\n                let nextRow = this.el.nativeElement.nextElementSibling;\r\n                if (nextRow) {\r\n                    nextRow.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //down arrow\r\n            case 38:\r\n                let prevRow = this.el.nativeElement.previousElementSibling;\r\n                if (prevRow) {\r\n                    prevRow.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //left arrow\r\n            case 37:\r\n                if (this.rowNode.node.expanded) {\r\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\r\n                    this.rowNode.node.expanded = false;\r\n\r\n                    this.tt.onNodeCollapse.emit({\r\n                        originalEvent: event,\r\n                        node: this.rowNode.node\r\n                    });\r\n\r\n                    this.tt.updateSerializedValue();\r\n                    this.tt.tableService.onUIUpdate(this.tt.value);\r\n                    this.restoreFocus();\r\n                }\r\n            break;\r\n\r\n            //right arrow\r\n            case 39:\r\n                if (!this.rowNode.node.expanded) {\r\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\r\n                    this.rowNode.node.expanded = true;\r\n\r\n                    this.tt.onNodeExpand.emit({\r\n                        originalEvent: event,\r\n                        node: this.rowNode.node\r\n                    });\r\n\r\n                    this.tt.updateSerializedValue();\r\n                    this.tt.tableService.onUIUpdate(this.tt.value);\r\n                    this.restoreFocus();\r\n                }\r\n            break;\r\n        }\r\n    }\r\n\r\n    restoreFocus() {\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\r\n                if (row) {\r\n                    row.focus();\r\n                }\r\n            }, 25);\r\n        });\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableToggler',\r\n    template: `\r\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\r\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\r\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\r\n        </button>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TreeTableToggler {\r\n\r\n    @Input() rowNode: any;\r\n\r\n    constructor(public tt: TreeTable) {}\r\n\r\n    onClick(event: Event) {\r\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\r\n\r\n        if (this.rowNode.node.expanded) {\r\n            this.tt.onNodeExpand.emit({\r\n                originalEvent: event,\r\n                node: this.rowNode.node\r\n            });\r\n        }\r\n        else {\r\n            this.tt.onNodeCollapse.emit({\r\n                originalEvent: event,\r\n                node: this.rowNode.node\r\n            });\r\n        }\r\n\r\n        this.tt.updateSerializedValue();\r\n        this.tt.tableService.onUIUpdate(this.tt.value);\r\n\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,PaginatorModule,ScrollingModule,RippleModule],\r\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor,ScrollingModule],\r\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor]\r\n})\r\nexport class TreeTableModule { }\r\n"]}