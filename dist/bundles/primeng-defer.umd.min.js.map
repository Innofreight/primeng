{"version":3,"sources":["../../src/app/components/defer/defer.ts"],"names":["DeferredLoader","el","renderer","viewContainer","cd","this","onLoad","EventEmitter","prototype","ngAfterViewInit","_this","shouldLoad","load","isLoaded","documentScrollListener","listen","rect","nativeElement","getBoundingClientRect","document","documentElement","clientHeight","top","view","createEmbeddedView","template","emit","detectChanges","ngOnDestroy","Directive","args","selector","ElementRef","Renderer2","ViewContainerRef","ChangeDetectorRef","Output","ContentChild","TemplateRef","NgModule","imports","CommonModule","exports","declarations"],"mappings":"gaAiBI,SAAAA,EAAmBC,EAAuBC,EAA4BC,EAAyCC,GAA5FC,KAAAJ,GAAAA,EAAuBI,KAAAH,SAAAA,EAA4BG,KAAAF,cAAAA,EAAyCE,KAAAD,GAAAA,EARrGC,KAAAC,OAA4B,IAAIC,EAAAA,oBAU1CP,EAAAQ,UAAAC,gBAAA,WAAA,IAAAC,EAAAL,KACQA,KAAKM,cACLN,KAAKO,OAGJP,KAAKQ,aACNR,KAAKS,uBAAyBT,KAAKH,SAASa,OAAO,SAAU,UAAU,WAC/DL,EAAKC,eACLD,EAAKE,OACLF,EAAKI,yBACLJ,EAAKI,uBAAyB,WAM9Cd,EAAAQ,UAAAG,WAAA,WACI,GAAIN,KAAKQ,WACL,OAAO,EAGP,IAAIG,EAAOX,KAAKJ,GAAGgB,cAAcC,wBAIjC,OAHiBC,SAASC,gBACCC,cAENL,EAAKM,KAIlCtB,EAAAQ,UAAAI,KAAA,WACIP,KAAKkB,KAAOlB,KAAKF,cAAcqB,mBAAmBnB,KAAKoB,UACvDpB,KAAKC,OAAOoB,OACZrB,KAAKD,GAAGuB,iBAGZ3B,EAAAQ,UAAAK,SAAA,WACI,OAAoB,MAAbR,KAAKkB,MAGhBvB,EAAAQ,UAAAoB,YAAA,WACIvB,KAAKkB,KAAO,KAERlB,KAAKS,wBACLT,KAAKS,mDA1DhBe,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,wDALaC,EAAAA,kBACFC,EAAAA,iBAAjBC,EAAAA,wBAA6DC,EAAAA,qDAQhEC,EAAAA,yBAEAC,EAAAA,aAAYP,KAAA,CAACQ,EAAAA,sBA6DlB,iCALCC,EAAAA,SAAQT,KAAA,CAAC,CACNU,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC1C,GACV2C,aAAc,CAAC3C","sourcesContent":["import {NgModule,Directive,ElementRef,AfterViewInit,OnDestroy,TemplateRef,EmbeddedViewRef,\r\n        ViewContainerRef,Renderer2,EventEmitter,Output,ContentChild, ChangeDetectorRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[pDefer]'\r\n})\r\nexport class DeferredLoader implements AfterViewInit,OnDestroy {\r\n        \r\n    @Output() onLoad: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n        \r\n    documentScrollListener: Function;\r\n    \r\n    view: EmbeddedViewRef<any>;\r\n            \r\n    constructor(public el: ElementRef, public renderer: Renderer2, public viewContainer: ViewContainerRef, private cd: ChangeDetectorRef) {}\r\n    \r\n    ngAfterViewInit() {\r\n        if (this.shouldLoad()) {\r\n            this.load();\r\n        }\r\n        \r\n        if (!this.isLoaded()) {\r\n            this.documentScrollListener = this.renderer.listen('window', 'scroll', () => {\r\n                if (this.shouldLoad()) {\r\n                    this.load();\r\n                    this.documentScrollListener();\r\n                    this.documentScrollListener = null;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    shouldLoad(): boolean {\r\n        if (this.isLoaded()) {\r\n            return false;\r\n        }\r\n        else {\r\n            let rect = this.el.nativeElement.getBoundingClientRect();\r\n            let docElement = document.documentElement;\r\n            let winHeight = docElement.clientHeight;\r\n            \r\n            return (winHeight >= rect.top);\r\n        }\r\n    }\r\n    \r\n    load(): void { \r\n        this.view = this.viewContainer.createEmbeddedView(this.template);\r\n        this.onLoad.emit();\r\n        this.cd.detectChanges();\r\n    }\r\n    \r\n    isLoaded() {\r\n        return this.view != null;\r\n    }\r\n            \r\n    ngOnDestroy() {\r\n        this.view = null;\r\n        \r\n        if (this.documentScrollListener) {\r\n            this.documentScrollListener();\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [DeferredLoader],\r\n    declarations: [DeferredLoader]\r\n})\r\nexport class DeferModule { }"]}