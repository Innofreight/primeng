{"version":3,"sources":["../../src/app/components/tabview/tabview.ts"],"names":["idx","TabPanel","tabView","viewContainer","cd","this","cache","tooltipPosition","tooltipPositionStyle","id","prototype","ngAfterContentInit","_this","templates","forEach","item","getType","headerTemplate","template","contentTemplate","Object","defineProperty","_selected","val","loaded","detectChanges","_disabled","disabled","markForCheck","_header","header","_leftIcon","leftIcon","_rightIcon","rightIcon","ngOnDestroy","view","Component","args","selector","Inject","forwardRef","TabView","ViewContainerRef","ChangeDetectorRef","Input","ContentChildren","PrimeTemplate","el","orientation","onChange","EventEmitter","onClose","activeIndexChange","initTabs","tabPanels","changes","subscribe","_","ngAfterViewChecked","tabChanged","updateInkBar","tabs","toArray","findSelectedTab","length","activeIndex","selected","open","event","tab","preventDefault","selectedTab","selectedTabIndex","findTabIndex","preventActiveIndexPropagation","emit","originalEvent","index","close","controlClose","closeTab","stopPropagation","i","tabPanel","closed","getBlockableElement","nativeElement","children","_activeIndex","tabHeader","DomHandler","findSingle","navbar","inkbar","style","width","getWidth","left","getOffset","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ViewChild","Output","NgModule","imports","CommonModule","SharedModule","TooltipModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,Output,EventEmitter,AfterContentInit,\r\n        ContentChildren,QueryList,TemplateRef,EmbeddedViewRef,ViewContainerRef,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation, ViewChild, AfterViewChecked, forwardRef, Inject} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TooltipModule} from 'primeng/tooltip';\r\nimport {RippleModule} from 'primeng/ripple';\r\nimport {SharedModule,PrimeTemplate} from 'primeng/api';\r\nimport {BlockableUI} from 'primeng/api';\r\nimport {DomHandler} from 'primeng/dom';\r\n\r\nlet idx: number = 0;\r\n\r\n@Component({\r\n    selector: 'p-tabPanel',\r\n    template: `\r\n        <div [attr.id]=\"id\" class=\"p-tabview-panel\" [hidden]=\"!selected\"\r\n            role=\"tabpanel\" [attr.aria-hidden]=\"!selected\" [attr.aria-labelledby]=\"id + '-label'\" *ngIf=\"!closed\">\r\n            <ng-content></ng-content>\r\n            <ng-container *ngIf=\"contentTemplate && (cache ? loaded : selected)\">\r\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n            </ng-container>\r\n        </div>\r\n    `\r\n})\r\nexport class TabPanel implements AfterContentInit,OnDestroy {\r\n    \r\n    @Input() closable: boolean;\r\n    \r\n    @Input() headerStyle: any;\r\n    \r\n    @Input() headerStyleClass: string;\r\n    \r\n    @Input() cache: boolean = true;\r\n\r\n    @Input() tooltip: any;\r\n    \r\n    @Input() tooltipPosition: string = 'top';\r\n\r\n    @Input() tooltipPositionStyle: string = 'absolute';\r\n\r\n    @Input() tooltipStyleClass: string;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n    \r\n    closed: boolean;\r\n    \r\n    view: EmbeddedViewRef<any>;\r\n    \r\n    _selected: boolean;\r\n\r\n    _disabled: boolean;\r\n    \r\n    _header: string;\r\n\r\n    _leftIcon: string;\r\n\r\n    _rightIcon: string;\r\n    \r\n    loaded: boolean;\r\n    \r\n    id: string = `p-tabpanel-${idx++}`;\r\n    \r\n    contentTemplate: TemplateRef<any>;\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    tabView: TabView;\r\n\r\n    constructor(@Inject(forwardRef(() => TabView)) tabView, public viewContainer: ViewContainerRef, public cd: ChangeDetectorRef) {\r\n        this.tabView = tabView as TabView;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                break;\r\n\r\n                case 'content':\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n                \r\n                default:\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n    \r\n    @Input() get selected(): boolean {\r\n        return this._selected;\r\n    }\r\n\r\n    set selected(val: boolean) {\r\n        this._selected = val;\r\n        \r\n        if (!this.loaded) {\r\n            this.cd.detectChanges();\r\n        }\r\n\r\n        if (val)\r\n            this.loaded = true;\r\n    }\r\n\r\n    @Input() get disabled(): boolean {\r\n        return this._disabled;\r\n    };\r\n\r\n    set disabled(disabled: boolean) {\r\n        this._disabled = disabled;\r\n        this.tabView.cd.markForCheck();\r\n    }\r\n    \r\n    @Input() get header(): string {\r\n        return this._header;\r\n    }\r\n    \r\n    set header(header: string) {\r\n        this._header = header;\r\n        this.tabView.cd.markForCheck();\r\n    }\r\n\r\n    @Input() get leftIcon(): string {\r\n        return this._leftIcon;\r\n    }\r\n\r\n    set leftIcon(leftIcon :string) {\r\n        this._leftIcon = leftIcon;\r\n        this.tabView.cd.markForCheck();\r\n    }\r\n\r\n    @Input() get rightIcon(): string {\r\n        return this._rightIcon;\r\n    }\r\n\r\n    set rightIcon(rightIcon :string) {\r\n        this._rightIcon = rightIcon;\r\n        this.tabView.cd.markForCheck();\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        this.view = null;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-tabView',\r\n    template: `\r\n        <div [ngClass]=\"'p-tabview p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <ul #navbar class=\"p-tabview-nav\" role=\"tablist\">\r\n                <ng-template ngFor let-tab [ngForOf]=\"tabs\">\r\n                    <li role=\"presentation\" [ngClass]=\"{'p-highlight': tab.selected, 'p-disabled': tab.disabled}\" [ngStyle]=\"tab.headerStyle\" [class]=\"tab.headerStyleClass\" *ngIf=\"!tab.closed\">\r\n                        <a role=\"tab\" class=\"p-tabview-nav-link\" [attr.id]=\"tab.id + '-label'\" [attr.aria-selected]=\"tab.selected\" [attr.aria-controls]=\"tab.id\" [pTooltip]=\"tab.tooltip\" [tooltipPosition]=\"tab.tooltipPosition\"\r\n                            [attr.aria-selected]=\"tab.selected\" [positionStyle]=\"tab.tooltipPositionStyle\" [tooltipStyleClass]=\"tab.tooltipStyleClass\"\r\n                            (click)=\"open($event,tab)\" (keydown.enter)=\"open($event,tab)\" pRipple [attr.tabindex]=\"tab.disabled ? null : '0'\">\r\n                            <ng-container *ngIf=\"!tab.headerTemplate\">\r\n                                <span class=\"p-tabview-left-icon\" [ngClass]=\"tab.leftIcon\" *ngIf=\"tab.leftIcon\"></span>\r\n                                <span class=\"p-tabview-title\">{{tab.header}}</span>\r\n                                <span class=\"p-tabview-right-icon\" [ngClass]=\"tab.rightIcon\" *ngIf=\"tab.rightIcon\"></span>\r\n                            </ng-container>\r\n                            <ng-container *ngTemplateOutlet=\"tab.headerTemplate\"></ng-container>\r\n                            <span *ngIf=\"tab.closable\" class=\"p-tabview-close pi pi-times\" (click)=\"close($event,tab)\"></span>\r\n                        </a>\r\n                    </li>\r\n                </ng-template>\r\n                <li #inkbar class=\"p-tabview-ink-bar\"></li>\r\n            </ul>\r\n            <div class=\"p-tabview-panels\">\r\n                <ng-content></ng-content>\r\n            </div>\r\n        </div>\r\n    `,\r\n   changeDetection: ChangeDetectionStrategy.OnPush,\r\n   encapsulation: ViewEncapsulation.None,\r\n   styleUrls: ['./tabview.css']\r\n})\r\nexport class TabView implements AfterContentInit,AfterViewChecked,BlockableUI {\r\n\r\n    @Input() orientation: string = 'top';\r\n    \r\n    @Input() style: any;\r\n    \r\n    @Input() styleClass: string;\r\n    \r\n    @Input() controlClose: boolean;\r\n\r\n    @ViewChild('navbar') navbar: ElementRef;\r\n\r\n    @ViewChild('inkbar') inkbar: ElementRef;\r\n    \r\n    @ContentChildren(TabPanel) tabPanels: QueryList<TabPanel>;\r\n\r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onClose: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() activeIndexChange: EventEmitter<number> = new EventEmitter();\r\n    \r\n    initialized: boolean;\r\n    \r\n    tabs: TabPanel[];\r\n    \r\n    _activeIndex: number;\r\n    \r\n    preventActiveIndexPropagation: boolean;\r\n\r\n    tabChanged: boolean;\r\n\r\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\r\n      \r\n    ngAfterContentInit() {\r\n        this.initTabs();\r\n        \r\n        this.tabPanels.changes.subscribe(_ => {\r\n            this.initTabs();\r\n        });\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.tabChanged) {\r\n            this.updateInkBar();\r\n            this.tabChanged = false;\r\n        }\r\n    }\r\n    \r\n    initTabs(): void {\r\n        this.tabs = this.tabPanels.toArray();\r\n        let selectedTab: TabPanel = this.findSelectedTab();\r\n        if (!selectedTab && this.tabs.length) {\r\n            if (this.activeIndex != null && this.tabs.length > this.activeIndex)\r\n                this.tabs[this.activeIndex].selected = true;\r\n            else\r\n                this.tabs[0].selected = true;\r\n\r\n            this.tabChanged = true;\r\n        }\r\n\r\n        this.cd.markForCheck();\r\n    }\r\n    \r\n    open(event: Event, tab: TabPanel) {\r\n        if (tab.disabled) {\r\n            if (event) {\r\n                event.preventDefault();\r\n            }\r\n            return;\r\n        }\r\n        \r\n        if (!tab.selected) {\r\n            let selectedTab: TabPanel = this.findSelectedTab();\r\n            if (selectedTab) {\r\n                selectedTab.selected = false\r\n            }\r\n            \r\n            this.tabChanged = true;\r\n            tab.selected = true;\r\n            let selectedTabIndex = this.findTabIndex(tab);\r\n            this.preventActiveIndexPropagation = true;\r\n            this.activeIndexChange.emit(selectedTabIndex);\r\n            this.onChange.emit({originalEvent: event, index: selectedTabIndex});\r\n        }\r\n        \r\n        if (event) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    \r\n    close(event: Event, tab: TabPanel) {\r\n        if (this.controlClose) {\r\n            this.onClose.emit({\r\n                originalEvent: event,\r\n                index: this.findTabIndex(tab),\r\n                close: () => {\r\n                    this.closeTab(tab);\r\n                }}\r\n            );\r\n        }\r\n        else {\r\n            this.closeTab(tab);\r\n            this.onClose.emit({\r\n                originalEvent: event,\r\n                index: this.findTabIndex(tab)\r\n            });\r\n        }\r\n        \r\n        event.stopPropagation();\r\n    }\r\n    \r\n    closeTab(tab: TabPanel) {\r\n        if (tab.disabled) {\r\n            return;\r\n        }\r\n        if (tab.selected) {\r\n            this.tabChanged = true;\r\n            tab.selected = false;\r\n            for(let i = 0; i < this.tabs.length; i++) {\r\n                let tabPanel = this.tabs[i];\r\n                if (!tabPanel.closed&&!tab.disabled) {\r\n                    tabPanel.selected = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        tab.closed = true;\r\n    }\r\n    \r\n    findSelectedTab() {\r\n        for(let i = 0; i < this.tabs.length; i++) {\r\n            if (this.tabs[i].selected) {\r\n                return this.tabs[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    findTabIndex(tab: TabPanel) {\r\n        let index = -1;\r\n        for(let i = 0; i < this.tabs.length; i++) {\r\n            if (this.tabs[i] == tab) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n    \r\n    getBlockableElement(): HTMLElement {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n    \r\n    @Input() get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    set activeIndex(val:number) {\r\n        this._activeIndex = val;\r\n        if (this.preventActiveIndexPropagation) {\r\n            this.preventActiveIndexPropagation = false;\r\n            return;\r\n        }\r\n\r\n        if (this.tabs && this.tabs.length && this._activeIndex != null && this.tabs.length > this._activeIndex) {\r\n            this.findSelectedTab().selected = false;\r\n            this.tabs[this._activeIndex].selected = true;\r\n            this.tabChanged = true;\r\n        }\r\n    }\r\n\r\n    updateInkBar() {\r\n        let tabHeader = DomHandler.findSingle(this.navbar.nativeElement, 'li.p-highlight');\r\n        this.inkbar.nativeElement.style.width = DomHandler.getWidth(tabHeader) + 'px';\r\n        this.inkbar.nativeElement.style.left =  DomHandler.getOffset(tabHeader).left - DomHandler.getOffset(this.navbar.nativeElement).left + 'px';\r\n    }\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [CommonModule,SharedModule,TooltipModule,RippleModule],\r\n    exports: [TabView,TabPanel,SharedModule],\r\n    declarations: [TabView,TabPanel]\r\n})\r\nexport class TabViewModule { }\r\n"]}