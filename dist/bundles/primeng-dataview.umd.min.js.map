{"version":3,"sources":["../../src/app/components/dataview/dataview.ts"],"names":["DataView","el","cd","filterService","config","this","pageLinks","paginatorPosition","alwaysShowPaginator","paginatorDropdownScrollHeight","currentPageReportTemplate","showFirstLastIcon","showPageLinks","emptyMessage","onLazyLoad","EventEmitter","trackBy","index","item","loadingIcon","first","onPage","onSort","onChangeLayout","_layout","Object","defineProperty","prototype","layout","initialized","changeLayout","ngOnInit","_this","lazy","emit","createLazyLoadMetadata","translationSubscription","translationObserver","subscribe","markForCheck","ngOnChanges","simpleChanges","value","_value","currentValue","updateTotalRecords","hasFilter","filter","filterValue","sortField","sortOrder","sort","ngAfterContentInit","templates","forEach","getType","listItemTemplate","template","gridItemTemplate","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownItemTemplate","emptyMessageTemplate","headerTemplate","footerTemplate","updateItemTemplate","itemTemplate","totalRecords","length","paginate","event","rows","data1","data2","value1","ObjectUtils","resolveFieldData","value2","result","localeCompare","isEmpty","data","filteredValue","getBlockableElement","nativeElement","children","getTranslation","TranslationKeys","EMPTY_MESSAGE","filterMatchMode","searchFields","filterBy","split","filterLocale","paginator","trim","ngOnDestroy","unsubscribe","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","FilterService","PrimeNGConfig","Input","Output","ContentChild","Header","Footer","ContentChildren","PrimeTemplate","DataViewLayoutOptions","dv","preventDefault","NgModule","imports","CommonModule","SharedModule","PaginatorModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnInit,AfterContentInit,Input,Output,EventEmitter,ContentChild,ContentChildren,QueryList,TemplateRef,OnChanges,SimpleChanges,ChangeDetectionStrategy,ChangeDetectorRef, ViewEncapsulation, OnDestroy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ObjectUtils} from 'primeng/utils';\r\nimport {Header,Footer,PrimeTemplate,SharedModule,FilterService, TranslationKeys, PrimeNGConfig} from 'primeng/api';\r\nimport {PaginatorModule} from 'primeng/paginator';\r\nimport {BlockableUI} from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'p-dataView',\r\n    template: `\r\n        <div [ngClass]=\"{'p-dataview p-component': true, 'p-dataview-list': (layout === 'list'), 'p-dataview-grid': (layout === 'grid')}\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <div class=\"p-dataview-loading\" *ngIf=\"loading\">\r\n                <div class=\"p-dataview-loading-overlay p-component-overlay\">\r\n                    <i [class]=\"'p-dataview-loading-icon pi-spin ' + loadingIcon\"></i>\r\n                </div>\r\n            </div>\r\n            <div class=\"p-dataview-header\" *ngIf=\"header || headerTemplate\">\r\n                <ng-content select=\"p-header\"></ng-content>\r\n                <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"paginate($event)\" styleClass=\"p-paginator-top\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\r\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\" [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\r\n            <div class=\"p-dataview-content\">\r\n                <div class=\"p-grid p-nogutter\">\r\n                    <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"paginator ? ((filteredValue||value) | slice:(lazy ? 0 : first):((lazy ? 0 : first) + rows)) : (filteredValue||value)\" [ngForTrackBy]=\"trackBy\">\r\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: rowData, rowIndex: rowIndex}\"></ng-container>\r\n                    </ng-template>\r\n                    <div *ngIf=\"isEmpty()\" class=\"p-col\">\r\n                            <div class=\"p-dataview-emptymessage\">\r\n                            <ng-container *ngIf=\"!emptyMessageTemplate; else emptyFilter\">\r\n                                    {{emptyMessageLabel}}\r\n                            </ng-container>\r\n                            <ng-container #emptyFilter *ngTemplateOutlet=\"emptyMessageTemplate\"></ng-container>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"paginate($event)\" styleClass=\"p-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\r\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\" [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\r\n            <div class=\"p-dataview-footer\" *ngIf=\"footer || footerTemplate\">\r\n                <ng-content select=\"p-footer\"></ng-content>\r\n                <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\r\n            </div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./dataview.css']\r\n})\r\nexport class DataView implements OnInit,AfterContentInit,OnDestroy,BlockableUI,OnChanges {\r\n\r\n    @Input() paginator: boolean;\r\n\r\n    @Input() rows: number;\r\n\r\n    @Input() totalRecords: number;\r\n\r\n    @Input() pageLinks: number = 5;\r\n\r\n    @Input() rowsPerPageOptions: any[];\r\n\r\n    @Input() paginatorPosition: string = 'bottom';\r\n\r\n    @Input() alwaysShowPaginator: boolean = true;\r\n\r\n    @Input() paginatorDropdownAppendTo: any;\r\n\r\n    @Input() paginatorDropdownScrollHeight: string = '200px';\r\n\r\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\r\n\r\n    @Input() showCurrentPageReport: boolean;\r\n\r\n    @Input() showJumpToPageDropdown: boolean;\r\n\r\n    @Input() showFirstLastIcon: boolean = true;\r\n\r\n    @Input() showPageLinks: boolean = true;\r\n\r\n    @Input() lazy: boolean;\r\n\r\n    @Input() emptyMessage: string = '';\r\n\r\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() trackBy: Function = (index: number, item: any) => item;\r\n\r\n    @Input() filterBy: string;\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() loading: boolean;\r\n\r\n    @Input() loadingIcon: string = 'pi pi-spinner';\r\n\r\n    @Input() first: number = 0;\r\n\r\n    @Input() sortField: string;\r\n\r\n    @Input() sortOrder: number;\r\n\r\n    @Input() value: any[];\r\n\r\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onChangeLayout: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ContentChild(Header) header;\r\n\r\n    @ContentChild(Footer) footer;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    _value: any[];\r\n\r\n    listItemTemplate: TemplateRef<any>;\r\n\r\n    gridItemTemplate: TemplateRef<any>;\r\n\r\n    itemTemplate: TemplateRef<any>;\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n    \r\n    emptyMessageTemplate: TemplateRef<any>;\r\n\r\n    footerTemplate: TemplateRef<any>;\r\n\r\n    paginatorLeftTemplate: TemplateRef<any>;\r\n\r\n    paginatorRightTemplate: TemplateRef<any>;\r\n\r\n    paginatorDropdownItemTemplate: TemplateRef<any>;\r\n\r\n    filteredValue: any[];\r\n\r\n    filterValue: string;\r\n\r\n    initialized: boolean;\r\n\r\n    _layout: string = 'list';\r\n\r\n    translationSubscription: Subscription;\r\n\r\n    @Input() get layout(): string {\r\n        return this._layout;\r\n    }\r\n\r\n    set layout(layout: string) {\r\n        this._layout = layout;\r\n\r\n        if (this.initialized) {\r\n            this.changeLayout(layout);\r\n        }\r\n    }\r\n\r\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef, public filterService: FilterService, public config: PrimeNGConfig) {}\r\n\r\n    ngOnInit() {\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n\r\n        this.translationSubscription = this.config.translationObserver.subscribe(() => {\r\n            this.cd.markForCheck();\r\n        });\r\n        this.initialized = true;\r\n    }\r\n\r\n    ngOnChanges(simpleChanges: SimpleChanges) {\r\n        if (simpleChanges.value) {\r\n            this._value = simpleChanges.value.currentValue;\r\n            this.updateTotalRecords();\r\n\r\n            if (!this.lazy && this.hasFilter()) {\r\n                this.filter(this.filterValue);\r\n            }\r\n        }\r\n\r\n        if (simpleChanges.sortField || simpleChanges.sortOrder) {\r\n            //avoid triggering lazy load prior to lazy initialization at onInit\r\n            if (!this.lazy || this.initialized) {\r\n                this.sort();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'listItem':\r\n                    this.listItemTemplate = item.template;\r\n                break;\r\n\r\n                case 'gridItem':\r\n                    this.gridItemTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorleft':\r\n                    this.paginatorLeftTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorright':\r\n                    this.paginatorRightTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatordropdownitem':\r\n                    this.paginatorDropdownItemTemplate = item.template;\r\n                break;\r\n\r\n                case 'empty':\r\n                    this.emptyMessageTemplate = item.template;\r\n                break;\r\n\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                break;\r\n\r\n                case 'footer':\r\n                    this.footerTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n\r\n        this.updateItemTemplate();\r\n    }\r\n\r\n    updateItemTemplate() {\r\n        switch(this.layout) {\r\n            case 'list':\r\n                this.itemTemplate = this.listItemTemplate;\r\n            break;\r\n\r\n            case 'grid':\r\n                this.itemTemplate = this.gridItemTemplate;\r\n            break;\r\n        }\r\n    }\r\n\r\n    changeLayout(layout: string) {\r\n        this._layout = layout;\r\n        this.onChangeLayout.emit({\r\n            layout: this.layout\r\n        });\r\n        this.updateItemTemplate();\r\n\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    updateTotalRecords() {\r\n        this.totalRecords = this.lazy ? this.totalRecords : (this._value ? this._value.length : 0);\r\n    }\r\n\r\n    paginate(event) {\r\n        this.first = event.first;\r\n        this.rows = event.rows;\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n\r\n        this.onPage.emit({\r\n            first: this.first,\r\n            rows: this.rows\r\n        });\r\n    }\r\n\r\n    sort() {\r\n        this.first = 0;\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else if (this.value) {\r\n            this.value.sort((data1, data2) => {\r\n                let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\r\n                let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\r\n                let result = null;\r\n\r\n                if (value1 == null && value2 != null)\r\n                    result = -1;\r\n                else if (value1 != null && value2 == null)\r\n                    result = 1;\r\n                else if (value1 == null && value2 == null)\r\n                    result = 0;\r\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\r\n                    result = value1.localeCompare(value2);\r\n                else\r\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\r\n\r\n                return (this.sortOrder * result);\r\n            });\r\n\r\n            if (this.hasFilter()) {\r\n                this.filter(this.filterValue);\r\n            }\r\n        }\r\n\r\n        this.onSort.emit({\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder\r\n        });\r\n    }\r\n\r\n    isEmpty() {\r\n        let data = this.filteredValue||this.value;\r\n        return data == null || data.length == 0;\r\n    }\r\n\r\n    createLazyLoadMetadata(): any {\r\n        return {\r\n            first: this.first,\r\n            rows: this.rows,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder\r\n        };\r\n    }\r\n\r\n    getBlockableElement(): HTMLElement {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n\r\n\r\n\r\n    get emptyMessageLabel(): string {\r\n        return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\r\n    }\r\n\r\n    filter(filter: string, filterMatchMode:string =\"contains\") {\r\n        this.filterValue = filter;\r\n\r\n        if (this.value && this.value.length) {\r\n            let searchFields = this.filterBy.split(',');\r\n            this.filteredValue = this.filterService.filter(this.value, searchFields, filter, filterMatchMode, this.filterLocale);\r\n\r\n            if (this.filteredValue.length === this.value.length ) {\r\n                this.filteredValue = null;\r\n            }\r\n\r\n            if (this.paginator) {\r\n                this.first = 0;\r\n                this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\r\n            }\r\n\r\n            this.cd.markForCheck();\r\n        }\r\n    }\r\n\r\n    hasFilter() {\r\n        return this.filterValue && this.filterValue.trim().length > 0;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.translationSubscription) {\r\n            this.translationSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-dataViewLayoutOptions',\r\n    template: `\r\n        <div [ngClass]=\"'p-dataview-layout-options p-selectbutton p-buttonset'\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <button type=\"button\" class=\"p-button p-button-icon-only\" [ngClass]=\"{'p-highlight': dv.layout === 'list'}\" (click)=\"changeLayout($event, 'list')\" (keydown.enter)=\"changeLayout($event, 'list')\">\r\n                <i class=\"pi pi-bars\"></i>\r\n            </button><button type=\"button\" class=\"p-button p-button-icon-only\" [ngClass]=\"{'p-highlight': dv.layout === 'grid'}\" (click)=\"changeLayout($event, 'grid')\" (keydown.enter)=\"changeLayout($event, 'grid')\">\r\n                <i class=\"pi pi-th-large\"></i>\r\n            </button>\r\n        </div>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class DataViewLayoutOptions  {\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    constructor(public dv: DataView) {}\r\n\r\n    changeLayout(event: Event, layout: string) {\r\n        this.dv.changeLayout(layout);\r\n        event.preventDefault();\r\n    }\r\n}\r\n@NgModule({\r\n    imports: [CommonModule,SharedModule,PaginatorModule],\r\n    exports: [DataView,SharedModule,DataViewLayoutOptions],\r\n    declarations: [DataView,DataViewLayoutOptions]\r\n})\r\nexport class DataViewModule { }\r\n"]}