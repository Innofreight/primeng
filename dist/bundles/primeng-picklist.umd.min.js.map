{"version":3,"sources":["../../src/app/components/picklist/picklist.ts"],"names":["PickList","el","cd","filterService","this","trackBy","index","item","showSourceFilter","showTargetFilter","metaKeySelection","dragdrop","showSourceControls","showTargetControls","disabled","filterMatchMode","breakpoint","onMoveToSource","EventEmitter","onMoveAllToSource","onMoveAllToTarget","onMoveToTarget","onSourceReorder","onTargetReorder","onSourceSelect","onTargetSelect","onSourceFilter","onTargetFilter","selectedItemsSource","selectedItemsTarget","id","UniqueComponentId","SOURCE_LIST","TARGET_LIST","prototype","ngOnInit","responsive","createStyle","ngAfterContentInit","_this","templates","forEach","getType","itemTemplate","template","sourceHeaderTemplate","targetHeaderTemplate","emptyMessageSourceTemplate","emptyFilterMessageSourceTemplate","emptyMessageTargetTemplate","emptyFilterMessageTargetTemplate","ngAfterViewChecked","movedUp","movedDown","listItems","DomHandler","find","reorderedListElement","listItem","length","scrollInView","onItemClick","event","selectedItems","callback","findIndexInSelection","selected","itemTouched","metaKey","ctrlKey","shiftKey","splice","push","emit","originalEvent","items","onSourceItemDblClick","moveRight","onTargetItemDblClick","moveLeft","onFilter","data","listType","query","target","value","trim","toLocaleLowerCase","filterLocale","filterValueSource","filterValueTarget","filter","searchFields","filterBy","split","visibleOptionsSource","visibleOptionsTarget","isItemVisible","isVisibleInList","isEmpty","source","filterValue","i","onItemTouchEnd","sortByIndexInList","list","sort","item1","item2","ObjectUtils","findIndexInList","moveUp","listElement","selectedItem","selectedItemIndex","movedItem","temp","moveTop","unshift","scrollTop","moveDown","moveBottom","scrollHeight","moveAllRight","movedItems","removedItem","moveAllLeft","isSelected","onDrop","isTransfer","previousContainer","container","dropIndexes","getDropIndexes","previousIndex","currentIndex","transferArrayItem","moveItemInArray","fromIndex","toIndex","droppedList","findFilteredCurrentIndex","visibleOptions","options","resetFilter","sourceFilterViewChild","nativeElement","targetFilterViewChild","onItemKeydown","currentTarget","which","nextItem","findNextItem","focus","preventDefault","prevItem","findPrevItem","nextElementSibling","hasClass","isHidden","previousElementSibling","styleElement","children","setAttribute","document","createElement","type","head","appendChild","innerHTML","destroyStyle","removeChild","ngOnDestroy","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","FilterService","Input","Output","ViewChild","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","ButtonModule","SharedModule","RippleModule","DragDropModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, AfterContentInit, AfterViewChecked, Input, Output, ContentChildren, QueryList, TemplateRef, EventEmitter, ViewChild, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ButtonModule} from 'primeng/button';\r\nimport {SharedModule,PrimeTemplate,FilterService} from 'primeng/api';\r\nimport {DomHandler} from 'primeng/dom';\r\nimport {RippleModule} from 'primeng/ripple';\r\nimport {CdkDragDrop, DragDropModule, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';\r\nimport {ObjectUtils, UniqueComponentId} from 'primeng/utils';\r\n\r\n@Component({\r\n    selector: 'p-pickList',\r\n    template: `\r\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'p-picklist p-component'\" cdkDropListGroup>\r\n            <div class=\"p-picklist-buttons p-picklist-source-controls\" *ngIf=\"showSourceControls\">\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-up\" [disabled]=\"disabled\" (click)=\"moveUp(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)\"></button>\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-up\" [disabled]=\"disabled\" (click)=\"moveTop(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)\"></button>\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-down\" [disabled]=\"disabled\" (click)=\"moveDown(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)\"></button>\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-down\" [disabled]=\"disabled\" (click)=\"moveBottom(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)\"></button>\r\n            </div>\r\n            <div class=\"p-picklist-list-wrapper p-picklist-source-wrapper\">\r\n                <div class=\"p-picklist-header\" *ngIf=\"sourceHeader || sourceHeaderTemplate\">\r\n                    <div class=\"p-picklist-title\" *ngIf=\"!sourceHeaderTemplate\">{{sourceHeader}}</div>\r\n                    <ng-container *ngTemplateOutlet=\"sourceHeaderTemplate\"></ng-container>\r\n                </div>\r\n                <div class=\"p-picklist-filter-container\" *ngIf=\"filterBy && showSourceFilter !== false\">\r\n                    <div class=\"p-picklist-filter\">\r\n                        <input #sourceFilter type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,source,SOURCE_LIST)\" class=\"p-picklist-filter-input p-inputtext p-component\" [disabled]=\"disabled\" [attr.placeholder]=\"sourceFilterPlaceholder\" [attr.aria-label]=\"ariaSourceFilterLabel\">\r\n                        <span class=\"p-picklist-filter-icon pi pi-search\"></span>\r\n                    </div>\r\n                </div>\r\n                \r\n                <ul #sourcelist class=\"p-picklist-list p-picklist-source\" cdkDropList [cdkDropListData]=\"source\" (cdkDropListDropped)=\"onDrop($event, SOURCE_LIST)\"\r\n                    [ngStyle]=\"sourceStyle\" role=\"listbox\" aria-multiselectable=\"multiple\">\r\n                    <ng-template ngFor let-item [ngForOf]=\"source\" [ngForTrackBy]=\"sourceTrackBy || trackBy\" let-i=\"index\" let-l=\"last\">\r\n                        <li [ngClass]=\"{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsSource),'p-disabled': disabled}\" pRipple cdkDrag [cdkDragData]=\"item\" [cdkDragDisabled]=\"!dragdrop\"\r\n                            (click)=\"onItemClick($event,item,selectedItemsSource,onSourceSelect)\" (dblclick)=\"onSourceItemDblClick()\" (touchend)=\"onItemTouchEnd()\" (keydown)=\"onItemKeydown($event,item,selectedItemsSource,onSourceSelect)\"\r\n                            *ngIf=\"isItemVisible(item, SOURCE_LIST)\" tabindex=\"0\" role=\"option\" [attr.aria-selected]=\"isSelected(item, selectedItemsSource)\">\r\n                            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\r\n                        </li>\r\n                    </ng-template>\r\n                    <ng-container *ngIf=\"isEmpty(SOURCE_LIST) && (emptyMessageSourceTemplate || emptyFilterMessageSourceTemplate)\">\r\n                        <li class=\"p-picklist-empty-message\" *ngIf=\"!filterValueSource || !emptyFilterMessageSourceTemplate\">\r\n                            <ng-container *ngTemplateOutlet=\"emptyMessageSourceTemplate\"></ng-container>\r\n                        </li>\r\n                        <li class=\"p-picklist-empty-message\" *ngIf=\"filterValueSource\">\r\n                            <ng-container *ngTemplateOutlet=\"emptyFilterMessageSourceTemplate\"></ng-container>\r\n                        </li>\r\n                    </ng-container>\r\n                </ul>\r\n            </div>\r\n            <div class=\"p-picklist-buttons p-picklist-transfer-buttons\">\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-right\" [disabled]=\"disabled\" (click)=\"moveRight()\"></button>\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-right\" [disabled]=\"disabled\" (click)=\"moveAllRight()\"></button>\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-left\" [disabled]=\"disabled\" (click)=\"moveLeft()\"></button>\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-left\" [disabled]=\"disabled\" (click)=\"moveAllLeft()\"></button>\r\n            </div>\r\n            <div class=\"p-picklist-list-wrapper p-picklist-target-wrapper\">\r\n                <div class=\"p-picklist-header\" *ngIf=\"targetHeader || targetHeaderTemplate\">\r\n                    <div class=\"p-picklist-title\" *ngIf=\"!targetHeaderTemplate\">{{targetHeader}}</div>\r\n                    <ng-container *ngTemplateOutlet=\"targetHeaderTemplate\"></ng-container>\r\n                </div>\r\n                <div class=\"p-picklist-filter-container\" *ngIf=\"filterBy && showTargetFilter !== false\">\r\n                    <div class=\"p-picklist-filter\">\r\n                        <input #targetFilter type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,target,TARGET_LIST)\" class=\"p-picklist-filter-input p-inputtext p-component\" [disabled]=\"disabled\" [attr.placeholder]=\"targetFilterPlaceholder\" [attr.aria-label]=\"ariaTargetFilterLabel\">\r\n                        <span class=\"p-picklist-filter-icon pi pi-search\"></span>\r\n                    </div>\r\n                </div>\r\n                <ul #targetlist class=\"p-picklist-list p-picklist-target\" cdkDropList [cdkDropListData]=\"target\" (cdkDropListDropped)=\"onDrop($event, TARGET_LIST)\"\r\n                    [ngStyle]=\"targetStyle\" role=\"listbox\" aria-multiselectable=\"multiple\">\r\n                    <ng-template ngFor let-item [ngForOf]=\"target\" [ngForTrackBy]=\"targetTrackBy || trackBy\" let-i=\"index\" let-l=\"last\">\r\n                        <li [ngClass]=\"{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsTarget), 'p-disabled': disabled}\" pRipple cdkDrag [cdkDragData]=\"item\" [cdkDragDisabled]=\"!dragdrop\"\r\n                            (click)=\"onItemClick($event,item,selectedItemsTarget,onTargetSelect)\" (dblclick)=\"onTargetItemDblClick()\" (touchend)=\"onItemTouchEnd()\" (keydown)=\"onItemKeydown($event,item,selectedItemsTarget,onTargetSelect)\"\r\n                            *ngIf=\"isItemVisible(item, TARGET_LIST)\" tabindex=\"0\" role=\"option\" [attr.aria-selected]=\"isSelected(item, selectedItemsTarget)\">\r\n                            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\r\n                        </li>\r\n                    </ng-template>\r\n                    <ng-container *ngIf=\"isEmpty(TARGET_LIST) && (emptyMessageTargetTemplate || emptyFilterMessageTargetTemplate)\">\r\n                        <li class=\"p-picklist-empty-message\" *ngIf=\"!filterValueTarget || !emptyFilterMessageTargetTemplate\">\r\n                            <ng-container *ngTemplateOutlet=\"emptyMessageTargetTemplate\"></ng-container>\r\n                        </li>\r\n                        <li class=\"p-picklist-empty-message\" *ngIf=\"filterValueTarget\">\r\n                            <ng-container *ngTemplateOutlet=\"emptyFilterMessageTargetTemplate\"></ng-container>\r\n                        </li>\r\n                    </ng-container>\r\n                </ul>\r\n            </div>\r\n            <div class=\"p-picklist-buttons p-picklist-target-controls\" *ngIf=\"showTargetControls\">\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-up\" [disabled]=\"disabled\" (click)=\"moveUp(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)\"></button>\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-up\" [disabled]=\"disabled\" (click)=\"moveTop(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)\"></button>\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-down\" [disabled]=\"disabled\" (click)=\"moveDown(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)\"></button>\r\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-down\" [disabled]=\"disabled\" (click)=\"moveBottom(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)\"></button>\r\n            </div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./picklist.css']\r\n})\r\nexport class PickList implements AfterViewChecked,AfterContentInit {\r\n\r\n    @Input() source: any[];\r\n\r\n    @Input() target: any[];\r\n\r\n    @Input() sourceHeader: string;\r\n\r\n    @Input() targetHeader: string;\r\n\r\n    @Input() responsive: boolean;\r\n\r\n    @Input() filterBy: string;\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() trackBy: Function = (index: number, item: any) => item;\r\n\r\n    @Input() sourceTrackBy: Function;\r\n\r\n    @Input() targetTrackBy: Function;\r\n\r\n    @Input() showSourceFilter: boolean = true;\r\n\r\n    @Input() showTargetFilter: boolean = true;\r\n\r\n    @Input() metaKeySelection: boolean = true;\r\n\r\n    @Input() dragdrop: boolean = false;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() sourceStyle: any;\r\n\r\n    @Input() targetStyle: any;\r\n\r\n    @Input() showSourceControls: boolean = true;\r\n\r\n    @Input() showTargetControls: boolean = true;\r\n\r\n    @Input() sourceFilterPlaceholder: string;\r\n\r\n    @Input() targetFilterPlaceholder: string;\r\n\r\n    @Input() disabled: boolean = false;\r\n\r\n    @Input() ariaSourceFilterLabel: string;\r\n\r\n    @Input() ariaTargetFilterLabel: string;\r\n\r\n    @Input() filterMatchMode: string = \"contains\";\r\n\r\n    @Input() breakpoint: string = \"960px\";\r\n\r\n    @Output() onMoveToSource: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onMoveAllToSource: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onMoveAllToTarget: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onMoveToTarget: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSourceReorder: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onTargetReorder: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSourceSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onTargetSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSourceFilter: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onTargetFilter: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ViewChild('sourcelist') listViewSourceChild: ElementRef;\r\n\r\n    @ViewChild('targetlist') listViewTargetChild: ElementRef;\r\n\r\n    @ViewChild('sourceFilter') sourceFilterViewChild: ElementRef;\r\n\r\n    @ViewChild('targetFilter') targetFilterViewChild: ElementRef;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    public itemTemplate: TemplateRef<any>;\r\n\r\n    public visibleOptionsSource: any[];\r\n\r\n    public visibleOptionsTarget: any[];\r\n\r\n    selectedItemsSource: any[] = [];\r\n\r\n    selectedItemsTarget: any[] = [];\r\n\r\n    reorderedListElement: any;\r\n\r\n    movedUp: boolean;\r\n\r\n    movedDown: boolean;\r\n\r\n    itemTouched: boolean;\r\n\r\n    styleElement: any;\r\n\r\n    id: string = UniqueComponentId();\r\n\r\n    filterValueSource: string;\r\n\r\n    filterValueTarget: string;\r\n\r\n    fromListType: number;\r\n\r\n    emptyMessageSourceTemplate: TemplateRef<any>;\r\n\r\n    emptyFilterMessageSourceTemplate: TemplateRef<any>;\r\n\r\n    emptyMessageTargetTemplate: TemplateRef<any>;\r\n\r\n    emptyFilterMessageTargetTemplate: TemplateRef<any>;\r\n\r\n    sourceHeaderTemplate: TemplateRef<any>;\r\n\r\n    targetHeaderTemplate: TemplateRef<any>;\r\n\r\n    readonly SOURCE_LIST = -1;\r\n\r\n    readonly TARGET_LIST = 1;\r\n\r\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef, public filterService: FilterService) {}\r\n\r\n\r\n    ngOnInit() {\r\n        if (this.responsive) {\r\n            this.createStyle();\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'item':\r\n                    this.itemTemplate = item.template;\r\n                break;\r\n\r\n                case 'sourceHeader':\r\n                    this.sourceHeaderTemplate = item.template;\r\n                break;\r\n\r\n                case 'targetHeader':\r\n                    this.targetHeaderTemplate = item.template;\r\n                break;\r\n\r\n                case 'emptymessagesource':\r\n                    this.emptyMessageSourceTemplate = item.template;\r\n                break;\r\n\r\n                case 'emptyfiltermessagesource':\r\n                    this.emptyFilterMessageSourceTemplate = item.template;\r\n                break;\r\n\r\n                case 'emptymessagetarget':\r\n                    this.emptyMessageTargetTemplate = item.template;\r\n                break;\r\n\r\n                case 'emptyfiltermessagetarget':\r\n                    this.emptyFilterMessageTargetTemplate = item.template;\r\n                break;\r\n\r\n                default:\r\n                    this.itemTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.movedUp||this.movedDown) {\r\n            let listItems = DomHandler.find(this.reorderedListElement, 'li.p-highlight');\r\n            let listItem;\r\n\r\n            if (this.movedUp)\r\n                listItem = listItems[0];\r\n            else\r\n                listItem = listItems[listItems.length - 1];\r\n\r\n            DomHandler.scrollInView(this.reorderedListElement, listItem);\r\n            this.movedUp = false;\r\n            this.movedDown = false;\r\n            this.reorderedListElement = null;\r\n        }\r\n    }\r\n\r\n    onItemClick(event, item: any, selectedItems: any[], callback: EventEmitter<any>) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        let index = this.findIndexInSelection(item,selectedItems);\r\n        let selected = (index != -1);\r\n        let metaSelection = this.itemTouched ? false : this.metaKeySelection;\r\n\r\n        if (metaSelection) {\r\n            let metaKey = (event.metaKey||event.ctrlKey||event.shiftKey);\r\n\r\n            if (selected && metaKey) {\r\n                selectedItems.splice(index, 1);\r\n            }\r\n            else {\r\n                if (!metaKey) {\r\n                    selectedItems.length = 0;\r\n                }\r\n                selectedItems.push(item);\r\n            }\r\n        }\r\n        else {\r\n            if (selected)\r\n                selectedItems.splice(index, 1);\r\n            else\r\n                selectedItems.push(item);\r\n        }\r\n\r\n        callback.emit({originalEvent: event, items: selectedItems});\r\n\r\n        this.itemTouched = false;\r\n    }\r\n\r\n    onSourceItemDblClick() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.moveRight();\r\n    }\r\n\r\n    onTargetItemDblClick() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.moveLeft();\r\n    }\r\n\r\n    onFilter(event: KeyboardEvent, data: any[], listType: number) {\r\n        let query = ((<HTMLInputElement> event.target).value.trim() as any).toLocaleLowerCase(this.filterLocale);\r\n        if (listType === this.SOURCE_LIST)\r\n            this.filterValueSource = query;\r\n        else if (listType === this.TARGET_LIST)\r\n            this.filterValueTarget = query;\r\n        \r\n        this.filter(data, listType);\r\n    }\r\n\r\n    filter(data: any[], listType: number) {\r\n        let searchFields = this.filterBy.split(',');\r\n\r\n        if (listType === this.SOURCE_LIST) {\r\n            this.visibleOptionsSource = this.filterService.filter(data, searchFields, this.filterValueSource, this.filterMatchMode, this.filterLocale);\r\n            this.onSourceFilter.emit({query: this.filterValueSource, value: this.visibleOptionsSource});\r\n        }\r\n        else if (listType === this.TARGET_LIST) {\r\n            this.visibleOptionsTarget = this.filterService.filter(data, searchFields, this.filterValueTarget, this.filterMatchMode, this.filterLocale);\r\n            this.onTargetFilter.emit({query: this.filterValueTarget, value: this.visibleOptionsTarget});\r\n        }\r\n    }\r\n\r\n    isItemVisible(item: any, listType: number): boolean {\r\n        if (listType == this.SOURCE_LIST)\r\n            return this.isVisibleInList(this.visibleOptionsSource, item, this.filterValueSource);\r\n        else\r\n            return this.isVisibleInList(this.visibleOptionsTarget, item, this.filterValueTarget);\r\n    }\r\n\r\n    isEmpty(listType: number) {\r\n        if (listType == this.SOURCE_LIST)\r\n            return this.filterValueSource ? (!this.visibleOptionsSource || this.visibleOptionsSource.length === 0) : (!this.source || this.source.length === 0);\r\n        else\r\n            return this.filterValueTarget ? (!this.visibleOptionsTarget || this.visibleOptionsTarget.length === 0) : (!this.target || this.target.length === 0);\r\n    }\r\n    \r\n\r\n    isVisibleInList(data: any[], item: any, filterValue: string): boolean {\r\n        if (filterValue && filterValue.trim().length) {\r\n            for(let i = 0; i < data.length; i++) {\r\n                if (item == data[i]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onItemTouchEnd() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.itemTouched = true;\r\n    }\r\n\r\n    private sortByIndexInList(items: any[], list: any) {\r\n        return items.sort((item1, item2) =>\r\n            ObjectUtils.findIndexInList(item1, list) - ObjectUtils.findIndexInList(item2, list));\r\n    }\r\n\r\n    moveUp(listElement, list, selectedItems, callback, listType) {\r\n        if (selectedItems && selectedItems.length) {\r\n            selectedItems = this.sortByIndexInList(selectedItems, list);\r\n            for(let i = 0; i < selectedItems.length; i++) {\r\n                let selectedItem = selectedItems[i];\r\n                let selectedItemIndex: number = ObjectUtils.findIndexInList(selectedItem, list);\r\n\r\n                if (selectedItemIndex != 0) {\r\n                    let movedItem = list[selectedItemIndex];\r\n                    let temp = list[selectedItemIndex-1];\r\n                    list[selectedItemIndex-1] = movedItem;\r\n                    list[selectedItemIndex] = temp;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (this.dragdrop && ((this.filterValueSource && listType === this.SOURCE_LIST) || (this.filterValueTarget && listType === this.TARGET_LIST)))\r\n                this.filter(list, listType);\r\n\r\n            this.movedUp = true;\r\n            this.reorderedListElement = listElement;\r\n            callback.emit({items: selectedItems});\r\n        }\r\n    }\r\n\r\n    moveTop(listElement, list, selectedItems, callback, listType) {\r\n        if (selectedItems && selectedItems.length) {\r\n            selectedItems = this.sortByIndexInList(selectedItems, list);\r\n            for(let i = 0; i < selectedItems.length; i++) {\r\n                let selectedItem = selectedItems[i];\r\n                let selectedItemIndex: number = ObjectUtils.findIndexInList(selectedItem, list);\r\n\r\n                if (selectedItemIndex != 0) {\r\n                    let movedItem = list.splice(selectedItemIndex,1)[0];\r\n                    list.unshift(movedItem);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (this.dragdrop && ((this.filterValueSource && listType === this.SOURCE_LIST) || (this.filterValueTarget && listType === this.TARGET_LIST)))\r\n                this.filter(list, listType);\r\n\r\n            listElement.scrollTop = 0;\r\n            callback.emit({items: selectedItems});\r\n        }\r\n    }\r\n\r\n    moveDown(listElement, list, selectedItems, callback, listType) {\r\n        if (selectedItems && selectedItems.length) {\r\n            selectedItems = this.sortByIndexInList(selectedItems, list);\r\n            for(let i = selectedItems.length - 1; i >= 0; i--) {\r\n                let selectedItem = selectedItems[i];\r\n                let selectedItemIndex: number = ObjectUtils.findIndexInList(selectedItem, list);\r\n\r\n                if (selectedItemIndex != (list.length - 1)) {\r\n                    let movedItem = list[selectedItemIndex];\r\n                    let temp = list[selectedItemIndex+1];\r\n                    list[selectedItemIndex+1] = movedItem;\r\n                    list[selectedItemIndex] = temp;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (this.dragdrop && ((this.filterValueSource && listType === this.SOURCE_LIST) || (this.filterValueTarget && listType === this.TARGET_LIST)))\r\n                this.filter(list, listType);\r\n\r\n            this.movedDown = true;\r\n            this.reorderedListElement = listElement;\r\n            callback.emit({items: selectedItems});\r\n        }\r\n    }\r\n\r\n    moveBottom(listElement, list, selectedItems, callback, listType) {\r\n        if (selectedItems && selectedItems.length) {\r\n            selectedItems = this.sortByIndexInList(selectedItems, list);\r\n            for(let i = selectedItems.length - 1; i >= 0; i--) {\r\n                let selectedItem = selectedItems[i];\r\n                let selectedItemIndex: number = ObjectUtils.findIndexInList(selectedItem, list);\r\n\r\n                if (selectedItemIndex != (list.length - 1)) {\r\n                    let movedItem = list.splice(selectedItemIndex,1)[0];\r\n                    list.push(movedItem);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (this.dragdrop && ((this.filterValueSource && listType === this.SOURCE_LIST) || (this.filterValueTarget && listType === this.TARGET_LIST)))\r\n                this.filter(list, listType);\r\n\r\n            listElement.scrollTop = listElement.scrollHeight;\r\n            callback.emit({items: selectedItems});\r\n        }\r\n    }\r\n\r\n    moveRight() {\r\n        if (this.selectedItemsSource && this.selectedItemsSource.length) {\r\n            for(let i = 0; i < this.selectedItemsSource.length; i++) {\r\n                let selectedItem = this.selectedItemsSource[i];\r\n                if (ObjectUtils.findIndexInList(selectedItem, this.target) == -1) {\r\n                    this.target.push(this.source.splice(ObjectUtils.findIndexInList(selectedItem, this.source),1)[0]);\r\n\r\n                    if (this.visibleOptionsSource)\r\n                        this.visibleOptionsSource.splice(ObjectUtils.findIndexInList(selectedItem, this.visibleOptionsSource),1);\r\n                }\r\n            }\r\n            this.onMoveToTarget.emit({\r\n                items: this.selectedItemsSource\r\n            });\r\n            this.selectedItemsSource = [];\r\n\r\n            if (this.filterValueTarget) {\r\n                this.filter(this.target, this.TARGET_LIST);\r\n            }\r\n        }\r\n    }\r\n\r\n    moveAllRight() {\r\n        if (this.source) {\r\n            let movedItems = [];\r\n\r\n            for(let i = 0; i < this.source.length; i++) {\r\n                if (this.isItemVisible(this.source[i], this.SOURCE_LIST)) {\r\n                    let removedItem = this.source.splice(i, 1)[0];\r\n                    this.target.push(removedItem);\r\n                    movedItems.push(removedItem);\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            this.onMoveAllToTarget.emit({\r\n                items: movedItems\r\n            });\r\n\r\n            this.selectedItemsSource = [];\r\n\r\n            if (this.filterValueTarget) {\r\n                this.filter(this.target, this.TARGET_LIST);\r\n            }\r\n\r\n            this.visibleOptionsSource = [];\r\n        }\r\n    }\r\n\r\n    moveLeft() {\r\n        if (this.selectedItemsTarget && this.selectedItemsTarget.length) {\r\n            for(let i = 0; i < this.selectedItemsTarget.length; i++) {\r\n                let selectedItem = this.selectedItemsTarget[i];\r\n                if (ObjectUtils.findIndexInList(selectedItem, this.source) == -1) {\r\n                    this.source.push(this.target.splice(ObjectUtils.findIndexInList(selectedItem, this.target),1)[0]);\r\n\r\n                    if (this.visibleOptionsTarget)\r\n                        this.visibleOptionsTarget.splice(ObjectUtils.findIndexInList(selectedItem, this.visibleOptionsTarget),1)[0]\r\n                }\r\n            }\r\n            this.onMoveToSource.emit({\r\n                items: this.selectedItemsTarget\r\n            });\r\n\r\n            this.selectedItemsTarget = [];\r\n\r\n            if (this.filterValueSource) {\r\n                this.filter(this.source, this.SOURCE_LIST);\r\n            }\r\n        }\r\n    }\r\n\r\n    moveAllLeft() {\r\n        if (this.target) {\r\n            let movedItems = [];\r\n\r\n            for(let i = 0; i < this.target.length; i++) {\r\n                if (this.isItemVisible(this.target[i], this.TARGET_LIST)) {\r\n                    let removedItem = this.target.splice(i, 1)[0];\r\n                    this.source.push(removedItem);\r\n                    movedItems.push(removedItem);\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            this.onMoveAllToSource.emit({\r\n                items: movedItems\r\n            });\r\n\r\n            this.selectedItemsTarget = [];\r\n\r\n            if (this.filterValueSource) {\r\n                this.filter(this.source, this.SOURCE_LIST);\r\n            }\r\n\r\n            this.visibleOptionsTarget = [];\r\n        }\r\n    }\r\n\r\n    isSelected(item: any, selectedItems: any[]) {\r\n        return this.findIndexInSelection(item, selectedItems) != -1;\r\n    }\r\n\r\n    findIndexInSelection(item: any, selectedItems: any[]): number {\r\n        return ObjectUtils.findIndexInList(item, selectedItems);\r\n    }\r\n\r\n    onDrop(event: CdkDragDrop<string[]>, listType: number) {\r\n        let isTransfer = event.previousContainer !== event.container;\r\n        let dropIndexes = this.getDropIndexes(event.previousIndex, event.currentIndex, listType, isTransfer, event.item.data);\r\n        \r\n        if (listType === this.SOURCE_LIST) {\r\n            if (isTransfer) {\r\n                transferArrayItem(event.previousContainer.data, event.container.data, dropIndexes.previousIndex, dropIndexes.currentIndex);\r\n                \r\n                if (this.visibleOptionsTarget)\r\n                    this.visibleOptionsTarget.splice(event.previousIndex, 1);\r\n                \r\n                this.onMoveToSource.emit({items: event.item.data});\r\n            }\r\n            else {\r\n                moveItemInArray(event.container.data, dropIndexes.previousIndex, dropIndexes.currentIndex);\r\n                this.onSourceReorder.emit({items: event.item.data});\r\n            }\r\n\r\n            if (this.filterValueSource) {\r\n                this.filter(this.source, this.SOURCE_LIST);\r\n            }\r\n        }\r\n        else {\r\n            if (isTransfer) {\r\n                transferArrayItem(event.previousContainer.data, event.container.data, dropIndexes.previousIndex, dropIndexes.currentIndex);\r\n                \r\n                if (this.visibleOptionsSource)\r\n                    this.visibleOptionsSource.splice(event.previousIndex, 1);\r\n                \r\n                this.onMoveToTarget.emit({items: event.item.data});\r\n            }\r\n            else {\r\n                moveItemInArray(event.container.data, dropIndexes.previousIndex, dropIndexes.currentIndex);\r\n                this.onTargetReorder.emit({items: event.item.data});\r\n            }\r\n\r\n            if (this.filterValueTarget) {\r\n                this.filter(this.target, this.TARGET_LIST);\r\n            }\r\n        }\r\n    }\r\n\r\n    getDropIndexes(fromIndex, toIndex, droppedList, isTransfer, data) {\r\n        let previousIndex, currentIndex;\r\n\r\n        if (droppedList === this.SOURCE_LIST) {\r\n            previousIndex = isTransfer ? this.filterValueTarget ? ObjectUtils.findIndexInList(data, this.target) : fromIndex : this.filterValueSource ? ObjectUtils.findIndexInList(data, this.source) : fromIndex;\r\n            currentIndex = this.filterValueSource ? this.findFilteredCurrentIndex(this.visibleOptionsSource, toIndex, this.source) : toIndex;\r\n        }\r\n        else {\r\n            previousIndex = isTransfer ? this.filterValueSource ? ObjectUtils.findIndexInList(data, this.source) : fromIndex : this.filterValueTarget ? ObjectUtils.findIndexInList(data, this.target) : fromIndex;\r\n            currentIndex = this.filterValueTarget ? this.findFilteredCurrentIndex(this.visibleOptionsTarget, toIndex, this.target) : toIndex;\r\n        }\r\n\r\n        return {previousIndex, currentIndex};\r\n    }\r\n\r\n    findFilteredCurrentIndex(visibleOptions, index, options) {\r\n        if (visibleOptions.length === index) {\r\n            let toIndex = ObjectUtils.findIndexInList(visibleOptions[index-1], options);\r\n            \r\n            return toIndex + 1;\r\n        }\r\n        else {\r\n            return ObjectUtils.findIndexInList(visibleOptions[index], options);\r\n        }\r\n    }\r\n\r\n    resetFilter() {\r\n        this.visibleOptionsSource = null;\r\n        this.filterValueSource = null;\r\n        this.visibleOptionsTarget = null;\r\n        this.filterValueTarget = null;\r\n\r\n        (<HTMLInputElement> this.sourceFilterViewChild.nativeElement).value = '';\r\n        (<HTMLInputElement> this.targetFilterViewChild.nativeElement).value = '';\r\n    }\r\n\r\n    onItemKeydown(event: KeyboardEvent, item: any, selectedItems: any[], callback: EventEmitter<any>) {\r\n        let listItem = <HTMLLIElement> event.currentTarget;\r\n\r\n        switch(event.which) {\r\n            //down\r\n            case 40:\r\n                var nextItem = this.findNextItem(listItem);\r\n                if (nextItem) {\r\n                    nextItem.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //up\r\n            case 38:\r\n                var prevItem = this.findPrevItem(listItem);\r\n                if (prevItem) {\r\n                    prevItem.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //enter\r\n            case 13:\r\n                this.onItemClick(event, item, selectedItems, callback);\r\n                event.preventDefault();\r\n            break;\r\n        }\r\n    }\r\n\r\n    findNextItem(item) {\r\n        let nextItem = item.nextElementSibling;\r\n\r\n        if (nextItem)\r\n            return !DomHandler.hasClass(nextItem, 'p-picklist-item') || DomHandler.isHidden(nextItem) ? this.findNextItem(nextItem) : nextItem;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    findPrevItem(item) {\r\n        let prevItem = item.previousElementSibling;\r\n\r\n        if (prevItem)\r\n            return !DomHandler.hasClass(prevItem, 'p-picklist-item') || DomHandler.isHidden(prevItem) ? this.findPrevItem(prevItem) : prevItem;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    createStyle() {\r\n        if (!this.styleElement) {\r\n            this.el.nativeElement.children[0].setAttribute(this.id, '');\r\n            this.styleElement = document.createElement('style');\r\n            this.styleElement.type = 'text/css';\r\n            document.head.appendChild(this.styleElement);\r\n\r\n            let innerHTML = `\r\n            @media screen and (max-width: ${this.breakpoint}) {\r\n                .p-picklist[${this.id}] {\r\n                    flex-direction: column;\r\n                }\r\n            \r\n                .p-picklist[${this.id}] .p-picklist-buttons {\r\n                    padding: var(--content-padding);\r\n                    flex-direction: row;\r\n                }\r\n            \r\n                .p-picklist[${this.id}] .p-picklist-buttons .p-button {\r\n                    margin-right: var(--inline-spacing);\r\n                    margin-bottom: 0;\r\n                }\r\n            \r\n                .p-picklist[${this.id}] .p-picklist-buttons .p-button:last-child {\r\n                    margin-right: 0;\r\n                }\r\n            \r\n                .p-picklist[${this.id}] .pi-angle-right:before {\r\n                    content: \"\\\\e930\"\r\n                }\r\n            \r\n                .p-picklist[${this.id}] .pi-angle-double-right:before {\r\n                    content: \"\\\\e92c\"\r\n                }\r\n            \r\n                .p-picklist[${this.id}] .pi-angle-left:before {\r\n                    content: \"\\\\e933\"\r\n                }\r\n            \r\n                .p-picklist[${this.id}] .pi-angle-double-left:before {\r\n                    content: \"\\\\e92f\"\r\n                }\r\n            }\r\n            `;\r\n            \r\n            this.styleElement.innerHTML = innerHTML;\r\n        }\r\n    }\r\n\r\n    destroyStyle() {\r\n        if (this.styleElement) {\r\n            document.head.removeChild(this.styleElement);\r\n            this.styleElement = null;``\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroyStyle();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,ButtonModule,SharedModule,RippleModule,DragDropModule],\r\n    exports: [PickList,SharedModule,DragDropModule],\r\n    declarations: [PickList]\r\n})\r\nexport class PickListModule { }\r\n"]}